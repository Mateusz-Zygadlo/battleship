(()=>{"use strict";const t=t=>{const e=document.querySelector(".gameboard");e.textContent="";for(let o=0;o<10;o++)for(let n=0;n<10;n++)if("x"==t[o][n]){const t=document.createElement("div");t.classList.add("checked"),t.dataset.row=o,t.dataset.column=n,e.appendChild(t)}else if("y"==t[o][n]){const t=document.createElement("div");t.classList.add("blocked"),t.dataset.row=o,t.dataset.column=n,e.appendChild(t)}else{const t=document.createElement("div");t.classList.add("gameField"),t.dataset.row=o,t.dataset.column=n,e.appendChild(t)}},e=t=>{const e=document.querySelector(".ships");e.textContent="";for(let o=0;o<t.length;o++)if(1==t[o].land);else{const n=document.createElement("div");n.classList.add("ship"),n.dataset.id=t[o].id,n.classList.add(t[o].name),n.style.gridTemplateColumns=`repeat(${t[o].size}, 1fr)`,n.style.width=`calc(${t[o].id} * 50px)`,n.style.height="50px",n.style.backgroundColor="black",n.draggable=!0;for(let e=0;e<t[o].size;e++){const t=document.createElement("div");t.classList.add("square"),n.appendChild(t)}e.appendChild(n)}},o=t=>{const e=document.querySelector(".computerGameBoard");e.textContent="";for(let o=0;o<10;o++)for(let n=0;n<10;n++)if("X"==t[o][n]){const t=document.createElement("div");t.classList.add("plays"),t.dataset.row=o,t.dataset.column=n,e.appendChild(t)}else{const t=document.createElement("div");t.classList.add("field"),t.dataset.row=o,t.dataset.column=n,e.appendChild(t)}},n=[],i=t=>{let e=0;for(let o=0;o<10;o++){const o=[];for(let t=0;t<10;t++)o.push(e),e++;t.push(o)}};i(n);const l=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}],s=[{name:"Destroyer",size:2,position:[]},{name:"Submarine",size:3,position:[]},{name:"Cruiser",size:3,position:[]},{name:"Battleship",size:4,position:[]},{name:"Carrier",size:5,position:[]}];let r=[];const a=t=>{for(let e=0;e<100;e++)t.push(e)};a([]),a(r);const d=t=>"X"!==t;let c=[];i(c),(()=>{let t=0;c.length=0,i(c),o(c);for(let o=0;o<1e3;o++){for(let t=0;t<s.length;t++)s[t].position.every(d)||(s[t].position.length=0);if(s[0].position.length&&s[1].position.length&&s[2].position.length&&s[3].position.length&&s[4].position.length){for(let e=0;e<10;e++)c[e].filter((t=>"X"==t))&&(t+=c[e].filter((t=>"X"==t)).length);return console.log(t),{computerArr:c,shipNameAndSizeComputer:s}}for(let t=0;t<s.length;t++)if(s[t].position.length>1);else{const o=(e=t,Math.floor(94*Math.random())+s[e].size);let n,i;1==o.toString().length?(n=0,i=Number(o.toString().split("")[0])):(n=Number(o.toString().split("")[0]),i=Number(o.toString().split("")[1]));const l=c[n].findIndex((t=>t==o));if(l>0&&l-s[t].size>=0)for(let e=0;e<s[t].size;e++)s[t].position.push(c[n][l-e]),c[n][l-e]="X"}}var e})();const p=[];i(p);let g,u=0;(()=>{for(let t=0;t<s.length;t++)for(let e=0;e<s[t].position.length;e++){let o,n;1==s[t].position[e].toString().split("").length?(o=0,n=Number(s[t].position[e].toString().split("")[0])):(o=s[t].position[e].toString().split("")[0],n=s[t].position[e].toString().split("")[1]),u++,p[o][n]="X"}})(),console.log(p,u),o(p),t(n),e(l),document.addEventListener("dragstart",(t=>{g=t.target,t.target.style.opacity=.3}),!1),document.addEventListener("dragend",(t=>{t.target.style.opacity="",t.target.dataset.row=t.target.firstChild.dataset.row,t.target.dataset.column=t.target.firstChild.dataset.column}),!1),document.addEventListener("dragover",(t=>{t.preventDefault()}),!1),document.addEventListener("dragenter",(t=>{"gameField"==t.target.className&&(t.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(t=>{"gameField"==t.target.className&&(t.target.style.background="")}),!1),document.addEventListener("drop",(o=>{if(o.preventDefault(),"gameField"==o.target.className){o.target.style.background="",o.target.appendChild(g);let i=!1,s=o.target.dataset.row+o.target.dataset.column,r=Number(s);for(let t=0;t<s.split("").length;t++)0==s.split("")[0]&&(s=s.split("")[1]);const a=o.target.firstChild.className.split(" ")[1];let d,c;for(let t=0;t<l.length;t++)l[t].name==a&&(d=l[t].size,c=t);const p=r,u=r+d-1,m=[];for(let t=p;t<=u;t++)m.push(t);e(l),((t,e,o,n,i)=>{for(let s=0;s<t.length;s++)if(t[s].includes(e))return!!t[s].includes(o)&&(n=!0,l[i].land=!0,n)})(n,p,u,i,c)?(o.target.style.background="",o.target.appendChild(g),g.parentNode.removeChild(g),((t,e,o,n,i)=>{for(let s=0;s<t.length;s++)for(let r=0;r<t[s].length;r++)if(t[s][r]==e)if(0==t[s][r]){for(let e=0;e<o;e++)l[n].position.push(t[s][r+e]),t[s][r+e]="x";t[s+1][r]="y";for(let e=0;e<o;e++)t[s+1][r+e]="y";t[s][r+o]="y"}else if(t[s][r]==t[0][r]){for(let e=0;e<o;e++)l[n].position.push(t[s][r+e]),t[s][r+e]="x";t[s+1][r]="y";for(let e=0;e<o;e++)t[s+1][r+e]="y";t[s][e-1]="y",t[s][i+1]="y"}else if(t[s][r]==t[9][r]&&0!=r){for(let e=0;e<o;e++)l[n].position.push(t[s][r+e]),t[s][r+e]="x";for(let e=0;e<o;e++)t[s-1][r+e]="y";t[s][o+r]="y",t[s][r-1]="y"}else if(t[s][r]==t[9][r]){for(let e=0;e<o;e++)l[n].position.push(t[s][r+e]),t[s][r+e]="x";for(let e=0;e<o;e++)t[s-1][r+e]="y";t[s][o]="y"}else{for(let e=0;e<o;e++)l[n].position.push(t[s][r+e]),t[s][r+e]="x";t[s+1][r]="y",t[s-1][r]="y",t[s][r-1]="y",t[s][r+o]="y";for(let e=0;e<o;e++)t[s+1][r+e]="y",t[s-1][r+e]="y"}})(n,p,d,c,u)):(o.target.style.background="",g.parentNode.removeChild(g),l[c].land=!1,e(l),t(n)),e(l)}t(n),(t=>{let e=0;for(let o=0;o<t.length;o++)t[o].position.length&&e++;return 5==e})(l)&&m()}),!1);const m=()=>{const t=document.querySelector(".ships");t.parentNode.removeChild(t),[...document.querySelector(".computerGameBoard").childNodes].forEach((t=>{t.addEventListener("click",(t=>{if(t.target.classList.contains("plays")){let e=[];const o=Number(String(t.target.dataset.row)+String(t.target.dataset.column));for(let t=0;t<s.length;t++)for(let e=0;e<s[t].position.length;e++)s[t].position[e]==o&&s[t].position.splice(e,1);t.target.classList.add("field"),t.target.classList.remove("plays");for(let t=0;t<s.length;t++)0==s[t].position.length&&e.push("true");if(5==e.length)return void f("you, [player]")}h(),console.log(r.length),console.log(l)}))}))},h=()=>{for(let t=0;t<1e3;t++){const t=Math.floor(99*Math.random());if(r.findIndex((e=>e==t))>-1){let e=r.findIndex((e=>e==t));1==t.toString().split("").length?(row=0,column=Number(t.toString().split("")[0])):(row=Number(t.toString().split("")[0]),column=Number(t.toString().split("")[1]));let o=r.splice(e,1);if(o){for(let t=0;t<l.length;t++)for(let e=0;e<l[t].position.length;e++)if(l[t].position[e]==o){let o=[];l[t].position.splice(e,1);for(let t=0;t<l.length;t++)0==l[t].position.length&&o.push("true");return 5==o.length?void f("computer"):void 0}let t=[];for(let e=0;e<l.length;e++)for(let o=0;o<l[e].position.length;o++)t.push(l[e].position[o]);return void console.log("You not blow",r.length,t.length)}}}},f=t=>{const e=document.querySelector(".game"),o=document.createElement("div");o.classList.add("fixedWinnerPage");const n=document.createElement("h1");n.textContent=`The winner is [${t}]`,o.appendChild(n),e.appendChild(o)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,