(()=>{"use strict";const e=e=>{const t=document.querySelector(".gameboard");t.textContent="";for(let o=0;o<10;o++)for(let s=0;s<10;s++)if("x"==e[o][s]){const e=document.createElement("div");e.classList.add("checked"),e.dataset.row=o,e.dataset.column=s,t.appendChild(e)}else if("y"==e[o][s]){const e=document.createElement("div");e.classList.add("blocked"),e.dataset.row=o,e.dataset.column=s,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("gameField"),e.dataset.row=o,e.dataset.column=s,t.appendChild(e)}},t=e=>{const t=document.querySelector(".ships");t.textContent="";for(let o=0;o<e.length;o++)if(1==e[o].land);else{const s=document.createElement("div");s.classList.add("ship"),s.dataset.id=e[o].id,s.classList.add(e[o].name),s.style.gridTemplateColumns=`repeat(${e[o].size}, 1fr)`,s.style.width=`calc(${e[o].id} * 50px)`,s.style.height="50px",s.style.backgroundColor="black",s.draggable=!0;for(let t=0;t<e[o].size;t++){const e=document.createElement("div");e.classList.add("square"),s.appendChild(e)}t.appendChild(s)}},o=()=>({rowChoice:Math.floor(9*Math.random()),columnChoice:Math.floor(99*Math.random())});(()=>{const e=document.querySelector(".computerGameBoard");e.textContent="";for(let t=0;t<10;t++)for(let o=0;o<10;o++){const s=document.createElement("div");s.classList.add("field"),s.dataset.row=t,s.dataset.column=o,e.appendChild(s)}})();const s=[];let n=0;for(let e=0;e<10;e++){const e=[];for(let t=0;t<10;t++)e.push(n),n++;s.push(e)}const l=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}];let i;console.log((()=>{o().rowChoice,o().columnChoice;let e=[];const t=e=>Math.floor(94*Math.random())+s[e].size,s=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}];let n=0;for(let t=0;t<10;t++){const t=[];for(let e=0;e<10;e++)t.push(n),n++;e.push(t)}for(let o=0;o<1e3;o++){if(s[0].position.length&&s[1].position.length&&s[2].position.length&&s[3].position.length&&s[4].position.length)return{computerArr:e,shipNameAndSizeComputer:s};for(let o=0;o<s.length;o++)if(s[o].position.length>1);else{const n=t(o);let l,i;1==n.toString().length?(l=0,i=Number(n.toString().split("")[0])):(l=Number(n.toString().split("")[0]),i=Number(n.toString().split("")[1]));const a=e[l].findIndex((e=>e==n));if(a>=0)if(a-s[o].size>0)for(let t=1;t<=s[o].size;t++)s[o].position.push(e[l][a-t]),e[l][a-t]="X";else{const n=t(o);let l,i;for(let t=0;t<1e3;t++)if(l=Number(n.toString().split("")[0]),i=Number(n.toString().split("")[1]),a>=0&&a-s[o].size>0){for(let t=1;t<=s[o].size;t++)s[o].position.push(e[l][a-t]),e[l][a-t]="X";break}}}}})()),e(s),t(l),document.addEventListener("dragstart",(e=>{i=e.target,e.target.style.opacity=.3}),!1),document.addEventListener("dragend",(e=>{e.target.style.opacity="",e.target.dataset.row=e.target.firstChild.dataset.row,e.target.dataset.column=e.target.firstChild.dataset.column}),!1),document.addEventListener("dragover",(e=>{e.preventDefault()}),!1),document.addEventListener("dragenter",(e=>{"gameField"==e.target.className&&(e.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(e=>{"gameField"==e.target.className&&(e.target.style.background="")}),!1),document.addEventListener("drop",(o=>{if(o.preventDefault(),"gameField"==o.target.className){o.target.style.background="",o.target.appendChild(i);let n=!1,a=o.target.dataset.row+o.target.dataset.column,r=Number(a);for(let e=0;e<a.split("").length;e++)0==a.split("")[0]&&(a=a.split("")[1]);const d=o.target.firstChild.className.split(" ")[1];let c,p;for(let e=0;e<l.length;e++)l[e].name==d&&(c=l[e].size,p=e);const m=r,g=r+c-1,u=[];for(let e=m;e<=g;e++)u.push(e);const h=(e,t,o,s)=>{for(let s=0;s<e.length;s++)if(e[s].includes(t))return!!e[s].includes(o)&&(!0,l[p].land=!0,true)};if(t(l),h(s,m,g,n)){o.target.style.background="",i.parentNode.removeChild(i),o.target.appendChild(i);for(let e=0;e<s.length;e++)for(let t=0;t<s[e].length;t++)if(s[e][t]==m)if(0==s[e][t]){for(let o=0;o<c;o++)l[p].position.push(s[e][t+o]),s[e][t+o]="x";s[e+1][t]="y";for(let o=0;o<c;o++)s[e+1][t+o]="y";s[e][t+c]="y",console.log(e)}else if(s[e][t]==s[0][t]){for(let o=0;o<c;o++)l[p].position.push(s[e][t+o]),s[e][t+o]="x";s[e+1][t]="y";for(let o=0;o<c;o++)s[e+1][t+o]="y";s[e][m-1]="y",s[e][g+1]="y"}else if(s[e][t]==s[9][t]&&0!=t){for(let o=0;o<c;o++)l[p].position.push(s[e][t+o]),s[e][t+o]="x";for(let o=0;o<c;o++)s[e-1][t+o]="y";console.log(!0,!1),s[e][c+t]="y",s[e][t-1]="y"}else if(s[e][t]==s[9][t]){for(let o=0;o<c;o++)l[p].position.push(s[e][t+o]),s[e][t+o]="x";for(let o=0;o<c;o++)s[e-1][t+o]="y";console.log(!0,!1),s[e][c]="y"}else{for(let o=0;o<c;o++)l[p].position.push(s[e][t+o]),s[e][t+o]="x";s[e+1][t]="y",s[e-1][t]="y",s[e][t-1]="y",s[e][t+c]="y";for(let o=0;o<c;o++)s[e+1][t+o]="y",s[e-1][t+o]="y"}i.parentNode.removeChild(i)}else i.parentNode.removeChild(i),o.target.style.background="",t(l),l[p].land=!1,e(s);t(l)}(e=>{let t=0;for(let o=0;o<e.length;o++)e[o].position.length&&t++;return 5==t})(l)&&console.log("start game"),e(s),console.log(s),console.log(l)}),!1)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,