(()=>{"use strict";const e=e=>{const t=document.querySelector(".gameboard");t.textContent="";for(let n=0;n<10;n++)for(let o=0;o<10;o++)if("x"==e[n][o]){const e=document.createElement("div");e.classList.add("checked"),e.dataset.row=n,e.dataset.column=o,t.appendChild(e)}else if("y"==e[n][o]){const e=document.createElement("div");e.classList.add("blocked"),e.dataset.row=n,e.dataset.column=o,t.appendChild(e)}else if("C"==e[n][o]){const e=document.createElement("div");e.classList.add("Clicked"),e.dataset.row=n,e.dataset.column=o,t.appendChild(e)}else if("D"==e[n][o]){const e=document.createElement("div");e.classList.add("delete"),e.dataset.row=n,e.dataset.column=o,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("gameField"),e.dataset.row=n,e.dataset.column=o,t.appendChild(e)}},t=e=>{const t=document.querySelector(".ships");t.textContent="";for(let n=0;n<e.length;n++)if(1==e[n].land);else{const o=document.createElement("div");o.classList.add("ship"),o.dataset.id=e[n].id,o.classList.add(e[n].name),o.style.gridTemplateColumns=`repeat(${e[n].size}, 1fr)`,o.style.width=`calc(${e[n].id} * 50px)`,o.style.height="50px",o.style.backgroundColor="black",o.draggable=!0;for(let t=0;t<e[n].size;t++){const e=document.createElement("div");e.classList.add("square"),o.appendChild(e)}t.appendChild(o)}},n=[],o=e=>{let t=0;for(let n=0;n<10;n++){const n=[];for(let e=0;e<10;e++)n.push(t),t++;e.push(n)}};o(n);const s=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}],i=[{name:"Destroyer",size:2,position:[]},{name:"Submarine",size:3,position:[]},{name:"Cruiser",size:3,position:[]},{name:"Battleship",size:4,position:[]},{name:"Carrier",size:5,position:[]}];let l=[],a=[];const d=e=>{for(let t=0;t<100;t++)e.push(t)};d(a),d(l);const r=e=>"X"!==e,c=e=>"Y"!=e;let p=[];o(p);const m=()=>{let e=0;p.length=0,o(p);for(let n=0;n<1e3;n++){for(let e=0;e<i.length;e++)i[e].position.every(r)||(i[e].position.length=0);if(i[0].position.length&&i[1].position.length&&i[2].position.length&&i[3].position.length&&i[4].position.length){for(let t=0;t<10;t++)p[t].filter((e=>"X"==e))&&(e+=p[t].filter((e=>"X"==e)).length);return console.log(e),{computerArr:p,shipNameAndSizeComputer:i}}for(let e=0;e<i.length;e++)if(i[e].position.length>1);else{const n=(t=e,Math.floor(94*Math.random())+i[t].size);let s,l;1==n.toString().length?(s=0,l=Number(n.toString().split("")[0])):(s=Number(n.toString().split("")[0]),l=Number(n.toString().split("")[1]));const a=p[s].findIndex((e=>e==n));if(a>0&&a-i[e].size>=0){for(let t=0;t<i[e].size;t++)i[e].position.push(p[s][a-t]),p[s][a-t]="X";if(0==s&&0==a){p[s+1][a+1]="Y";for(let t=0;t<i[e].size;t++)p[s+1][a-t]="Y"}else if(9==s&&a>0){p[s][a-i[e].size]="Y";for(let t=0;t<i[e].size;t++)p[s-1][a-t]="Y"}else if(9==s&&0==a)p[s][a+1]="Y",p[s][a-i[e].size]="Y";else if(0==s&&a>0){p[s][a+1]="Y",p[s][a-i[e].size]="Y";for(let t=0;t<i[e].size;t++)p[s+1][a-t]="Y"}else{p[s][a+1]="Y",p[s][a-i[e].size]="Y";for(let t=0;t<i[e].size;t++)p[s+1][a-t]="Y",p[s-1][a-t]="Y"}for(let e=0;e<i.length;e++)if(!i[e].position.every(c)){for(let e=0;e<i.length;e++)i[e].position.length=0;p.length=0,o(p),console.log(!1);break}console.log(i)}}}var t};m();const g=[];o(g);let u=0;const h=()=>{for(let e=0;e<1e3;e++)for(let e=0;e<i.length;e++)for(let t=0;t<i[e].position.length;t++){let n,o;1==i[e].position[t].toString().split("").length?(n=0,o=i[e].position[t].toString().split("")[0]):(n=i[e].position[t].toString().split("")[0],o=i[e].position[t].toString().split("")[1]),u++,g[n][o]="X"}};let f;h(),console.log(g,u),e(n),t(s),document.addEventListener("dragstart",(e=>{f=e.target,e.target.style.opacity=.3}),!1),document.addEventListener("dragend",(e=>{e.target.style.opacity="",e.target.dataset.row=e.target.firstChild.dataset.row,e.target.dataset.column=e.target.firstChild.dataset.column}),!1),document.addEventListener("dragover",(e=>{e.preventDefault()}),!1),document.addEventListener("dragenter",(e=>{"gameField"==e.target.className&&(e.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(e=>{"gameField"==e.target.className&&(e.target.style.background="")}),!1);const C=e=>{const t=document.querySelector(".shipsStatus");t.textContent="";for(let n=0;n<e.length;n++)if(e[n].name){const o=document.createElement("div");o.classList.add("ship");const s=document.createElement("div");s.classList.add("shipName"),s.textContent=e[n].name,o.appendChild(s);const i=document.createElement("div");i.classList.add("shipSize"),i.textContent=e[n].position.length,o.appendChild(i),t.appendChild(o)}},y=e=>{const t=document.querySelector(".shipsStatusTwo");t.textContent="";for(let n=0;n<e.length;n++)if(e[n].name){const o=document.createElement("div");o.classList.add("ship");const s=document.createElement("div");s.classList.add("shipName"),s.textContent=e[n].name,o.appendChild(s);const i=document.createElement("div");i.classList.add("shipSize"),i.textContent=e[n].position.length,o.appendChild(i),t.appendChild(o)}};document.addEventListener("drop",(o=>{if(o.preventDefault(),"gameField"==o.target.className){o.target.style.background="",o.target.appendChild(f);let i=o.target.dataset.row+o.target.dataset.column,l=Number(i);for(let e=0;e<i.split("").length;e++)0==i.split("")[0]&&(i=i.split("")[1]);const a=o.target.firstChild.className.split(" ")[1];let d,r;for(let e=0;e<s.length;e++)s[e].name==a&&(d=s[e].size,r=e);const c=l,p=l+d-1,m=[];for(let e=c;e<=p;e++)m.push(e);t(s),((e,t,n,o,s,i)=>{for(let o=0;o<e.length;o++)if(e[o].includes(t))return!!e[o].includes(n)&&(i[s].land=!0,!0)})(n,c,p,0,r,s)?(o.target.style.background="",o.target.appendChild(f),f.parentNode.removeChild(f),((e,t,n,o,s,i)=>{for(let l=0;l<e.length;l++)for(let a=0;a<e[l].length;a++)if(e[l][a]==t)if(0==e[l][a]){for(let t=0;t<n;t++)i[o].position.push(e[l][a+t]),e[l][a+t]="x";e[l+1][a]="y";for(let t=0;t<n;t++)e[l+1][a+t]="y";e[l][a+n]="y"}else if(e[l][a]==e[0][a]){for(let t=0;t<n;t++)i[o].position.push(e[l][a+t]),e[l][a+t]="x";e[l+1][a]="y";for(let t=0;t<n;t++)e[l+1][a+t]="y";e[l][t-1]="y",e[l][s+1]="y"}else if(e[l][a]==e[9][a]&&0!=a){for(let t=0;t<n;t++)i[o].position.push(e[l][a+t]),e[l][a+t]="x";for(let t=0;t<n;t++)e[l-1][a+t]="y";e[l][n+a]="y",e[l][a-1]="y"}else if(e[l][a]==e[9][a]){for(let t=0;t<n;t++)i[o].position.push(e[l][a+t]),e[l][a+t]="x";for(let t=0;t<n;t++)e[l-1][a+t]="y";e[l][n]="y"}else{for(let t=0;t<n;t++)i[o].position.push(e[l][a+t]),e[l][a+t]="x";e[l+1][a]="y",e[l-1][a]="y",e[l][a-1]="y",e[l][a+n]="y";for(let t=0;t<n;t++)e[l+1][a+t]="y",e[l-1][a+t]="y"}})(n,c,d,r,p,s)):(o.target.style.background="",f.parentNode.removeChild(f),s[r].land=!1,t(s),e(n)),t(s)}e(n),(e=>{let t=0;for(let n=0;n<e.length;n++)e[n].position.length&&t++;return 5==t})(s)&&v()}),!1);const v=()=>{const t=document.createElement("div");t.classList.add("computerGameBoard"),document.querySelector(".gameBoardComputer").appendChild(t),(e=>{const t=document.querySelector(".computerGameBoard");t.textContent="";for(let n=0;n<10;n++)for(let o=0;o<10;o++)if("X"==e[n][o]){const e=document.createElement("div");e.classList.add("plays"),e.dataset.row=n,e.dataset.column=o,t.appendChild(e)}else if("C"==e[n][o]){const e=document.createElement("div");e.classList.add("Clicked"),e.dataset.row=n,e.dataset.column=o,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("field"),e.dataset.row=n,e.dataset.column=o,t.appendChild(e)}})(g);const o=[...document.querySelector(".computerGameBoard").childNodes];C(s),y(i),o.forEach((t=>{t.addEventListener("click",(t=>{if(!t.target.classList.contains("Clicked")&&!t.target.classList.contains("delete")){if(t.target.classList.contains("field")&&(t.target.classList.remove("field"),t.target.classList.add("Clicked")),t.target.classList.contains("plays")){let e=[];const n=Number(String(t.target.dataset.row)+String(t.target.dataset.column));for(let e=0;e<i.length;e++)for(let t=0;t<i[e].position.length;t++)i[e].position[t]==n&&i[e].position.splice(t,1);t.target.classList.remove("plays"),t.target.classList.add("delete");for(let t=0;t<i.length;t++)0==i[t].position.length&&e.push("true");if(5==e.length)return void S("you, [player]")}L(),e(n),console.log(n),C(s),y(i)}}))}))},L=()=>{for(let e=0;e<1e3;e++){const e=Math.floor(99*Math.random());let t,o;if(l.findIndex((t=>t==e))>-1){let i=l.findIndex((t=>t==e));1==e.toString().split("").length?(t=0,o=Number(e.toString().split("")[0])):(t=Number(e.toString().split("")[0]),o=Number(e.toString().split("")[1]));let a=l.splice(i,1);if(n[t][o]="C",a){for(let e=0;e<s.length;e++)for(let i=0;i<s[e].position.length;i++)if(s[e].position[i]==a){let l=[];s[e].position.splice(i,1);for(let e=0;e<s.length;e++)0==s[e].position.length&&l.push("true");return n[t][o]="D",5==l.length?void S("computer"):void 0}let e=[];for(let t=0;t<s.length;t++)for(let n=0;n<s[t].position.length;n++)e.push(s[t].position[n]);return void console.log("You not blow",l.length,e.length)}}}},S=e=>{const t=document.querySelector(".game"),n=document.createElement("div");n.classList.add("fixedWinnerPage");const o=document.createElement("div");o.classList.add("content");const s=document.createElement("h1");s.textContent=`The winner is [${e}]`;const i=document.createElement("button");i.textContent="reset",i.classList.add("reset"),o.appendChild(s),o.appendChild(i),n.appendChild(o),t.appendChild(n)};document.addEventListener("click",(r=>{if(r.target.classList.contains("reset")){const r=document.querySelector(".fixedWinnerPage");r.parentNode.removeChild(r),document.querySelector(".gameBoardComputer").textContent="",document.querySelector(".shipsStatusTwo").textContent="",document.querySelector(".shipsStatus").textContent="",p.length=0,n.length=0,o(p),o(n),a.length=0,l.length=0,g.length=0,o(g),d(a),d(l);for(let e=0;e<s.length;e++)s[e].position.length=0,i[e].position.length=0,s[e].land=!1;m(),h(),e(n),t(s),console.log(s)}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,