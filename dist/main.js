(()=>{"use strict";const e=e=>{const t=document.querySelector(".gameboard");t.textContent="";for(let o=0;o<10;o++)for(let s=0;s<10;s++)if("x"==e[o][s]){const e=document.createElement("div");e.classList.add("checked"),e.dataset.row=o,e.dataset.column=s,t.appendChild(e)}else if("y"==e[o][s]){const e=document.createElement("div");e.classList.add("blocked"),e.dataset.row=o,e.dataset.column=s,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("gameField"),e.dataset.row=o,e.dataset.column=s,t.appendChild(e)}},t=e=>{const t=document.querySelector(".ships");t.textContent="";for(let o=0;o<e.length;o++)if(1==e[o].land);else{const s=document.createElement("div");s.classList.add("ship"),s.dataset.id=e[o].id,s.classList.add(e[o].name),s.style.gridTemplateColumns=`repeat(${e[o].size}, 1fr)`,s.style.width=`calc(${e[o].id} * 50px)`,s.style.height="50px",s.style.backgroundColor="black",s.draggable=!0;for(let t=0;t<e[o].size;t++){const e=document.createElement("div");e.classList.add("square"),s.appendChild(e)}t.appendChild(s)}},o=()=>({rowChoice:Math.floor(9*Math.random()),columnChoice:Math.floor(99*Math.random())});(()=>{const e=document.querySelector(".computerGameBoard");e.textContent="";for(let t=0;t<10;t++)for(let o=0;o<10;o++){const s=document.createElement("div");s.classList.add("field"),s.dataset.row=t,s.dataset.column=o,e.appendChild(s)}})();const s=[];let l=0;for(let e=0;e<10;e++){const e=[];for(let t=0;t<10;t++)e.push(l),l++;s.push(e)}const a=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}],i=()=>{const e=o().rowChoice,t=o().columnChoice,s=[],l=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}];let i=0;for(let e=0;e<10;e++){const e=[];for(let t=0;t<10;t++)e.push(i),i++;s.push(e)}for(let o=0;o<s.length;o++)for(let i=0;i<s[o].length;i++)if(s[e].includes(t)&&s[o].includes(t+a[0].size))for(let e=0;e<a[0].size;e++){let e=s[o].findIndex((e=>e==t));if(e>-1){for(let t=0;t<a[0].size;t++)l[0].position.push(s[o][e+t]),s[o][e+t]="T";if(o>0&&e>0){s[o+1][e]="y";for(let t=0;t<a[0].size;t++)s[o+1][e+t]="y",s[o-1][e+t]="y";s[o][e+a[0].size]="y",s[o][e-1]="y"}else if(s[o][e]==s[0][e]){s[o+1][e]="y";for(let t=0;t<a[0].size;t++)s[o+1][e+t]="y";s[o][e+a[0].size]="y",s[o][e-1]="y"}else if(s[o][e]==s[9][e]&&0!=i){for(let t=0;t<a[0].size;t++)s[o-1][e+t]="y";s[o][a[0].size+e]="y",s[o][e-1]="y"}else if(s[o][e]==s[9][e]){for(let t=0;t<a[0].size;t++)s[o-1][e+t]="y";s[o][a[0].size]="y"}else{s[o+1][e]="y",s[o-1][e]="y",s[o][e+a[0].size]="y";for(let t=0;t<a[0].size;t++)s[o+1][e+t]="y",s[o-1][e+t]="y";s[o][e-1]="y"}return{computerArr:s,shipNameAndSizeComputer:l}}return!1}};for(let e=0;e<100;e++)i()&&console.log(i());let n;i(),e(s),t(a),document.addEventListener("dragstart",(e=>{n=e.target,e.target.style.opacity=.3}),!1),document.addEventListener("dragend",(e=>{e.target.style.opacity="",e.target.dataset.row=e.target.firstChild.dataset.row,e.target.dataset.column=e.target.firstChild.dataset.column}),!1),document.addEventListener("dragover",(e=>{e.preventDefault()}),!1),document.addEventListener("dragenter",(e=>{"gameField"==e.target.className&&(e.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(e=>{"gameField"==e.target.className&&(e.target.style.background="")}),!1),document.addEventListener("drop",(o=>{if(o.preventDefault(),"gameField"==o.target.className){o.target.style.background="",o.target.appendChild(n);let l=!1,i=o.target.dataset.row+o.target.dataset.column,r=Number(i);for(let e=0;e<i.split("").length;e++)0==i.split("")[0]&&(i=i.split("")[1]);const d=o.target.firstChild.className.split(" ")[1];let c,p;for(let e=0;e<a.length;e++)a[e].name==d&&(c=a[e].size,p=e);const m=r,u=r+c-1,f=[];for(let e=m;e<=u;e++)f.push(e);const g=(e,t,o,s)=>{for(let s=0;s<e.length;s++)if(e[s].includes(t))return!!e[s].includes(o)&&(!0,a[p].land=!0,true)};if(t(a),g(s,m,u,l)){o.target.style.background="",n.parentNode.removeChild(n),o.target.appendChild(n);for(let e=0;e<s.length;e++)for(let t=0;t<s[e].length;t++)if(s[e][t]==m)if(0==s[e][t]){for(let o=0;o<c;o++)a[p].position.push(s[e][t+o]),s[e][t+o]="x";s[e+1][t]="y";for(let o=0;o<c;o++)s[e+1][t+o]="y";s[e][t+c]="y",console.log(e)}else if(s[e][t]==s[0][t]){for(let o=0;o<c;o++)a[p].position.push(s[e][t+o]),s[e][t+o]="x";s[e+1][t]="y";for(let o=0;o<c;o++)s[e+1][t+o]="y";s[e][m-1]="y",s[e][u+1]="y"}else if(s[e][t]==s[9][t]&&0!=t){for(let o=0;o<c;o++)a[p].position.push(s[e][t+o]),s[e][t+o]="x";for(let o=0;o<c;o++)s[e-1][t+o]="y";console.log(!0,!1),s[e][c+t]="y",s[e][t-1]="y"}else if(s[e][t]==s[9][t]){for(let o=0;o<c;o++)a[p].position.push(s[e][t+o]),s[e][t+o]="x";for(let o=0;o<c;o++)s[e-1][t+o]="y";console.log(!0,!1),s[e][c]="y"}else{for(let o=0;o<c;o++)a[p].position.push(s[e][t+o]),s[e][t+o]="x";s[e+1][t]="y",s[e-1][t]="y",s[e][t-1]="y",s[e][t+c]="y";for(let o=0;o<c;o++)s[e+1][t+o]="y",s[e-1][t+o]="y"}n.parentNode.removeChild(n)}else n.parentNode.removeChild(n),o.target.style.background="",t(a),a[p].land=!1,e(s);t(a)}(e=>{let t=0;for(let o=0;o<e.length;o++)e[o].position.length&&t++;return 5==t})(a)&&console.log("start game"),e(s),console.log(s),console.log(a)}),!1)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,