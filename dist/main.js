(()=>{"use strict";const e=e=>{const t=document.querySelector(".gameboard");t.textContent="";for(let o=0;o<10;o++)for(let n=0;n<10;n++)if("x"==e[o][n]){const e=document.createElement("div");e.classList.add("checked"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}else if("y"==e[o][n]){const e=document.createElement("div");e.classList.add("blocked"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("gameField"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}},t=e=>{const t=document.querySelector(".ships");t.textContent="";for(let o=0;o<e.length;o++)if(1==e[o].land);else{const n=document.createElement("div");n.classList.add("ship"),n.dataset.id=e[o].id,n.classList.add(e[o].name),n.style.gridTemplateColumns=`repeat(${e[o].size}, 1fr)`,n.style.width=`calc(${e[o].id} * 50px)`,n.style.height="50px",n.style.backgroundColor="black",n.draggable=!0;for(let t=0;t<e[o].size;t++){const e=document.createElement("div");e.classList.add("square"),n.appendChild(e)}t.appendChild(n)}},o=[],n=e=>{let t=0;for(let o=0;o<10;o++){const o=[];for(let e=0;e<10;e++)o.push(t),t++;e.push(o)}};n(o);const i=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}],s=[{name:"Destroyer",size:2,position:[]},{name:"Submarine",size:3,position:[]},{name:"Cruiser",size:3,position:[]},{name:"Battleship",size:4,position:[]},{name:"Carrier",size:5,position:[]}];let l=[];const a=e=>{for(let t=0;t<100;t++)e.push(t)};a([]),a(l);const r=e=>"X"!==e,d=e=>"Y"!=e;let c=[];n(c),(()=>{let e=0;c.length=0,n(c);for(let o=0;o<1e3;o++){for(let e=0;e<s.length;e++)s[e].position.every(r)||(s[e].position.length=0);if(s[0].position.length&&s[1].position.length&&s[2].position.length&&s[3].position.length&&s[4].position.length){for(let t=0;t<10;t++)c[t].filter((e=>"X"==e))&&(e+=c[t].filter((e=>"X"==e)).length);return console.log(e),{computerArr:c,shipNameAndSizeComputer:s}}for(let e=0;e<s.length;e++)if(s[e].position.length>1);else{const o=(t=e,Math.floor(94*Math.random())+s[t].size);let i,l;1==o.toString().length?(i=0,l=Number(o.toString().split("")[0])):(i=Number(o.toString().split("")[0]),l=Number(o.toString().split("")[1]));const a=c[i].findIndex((e=>e==o));if(a>0&&a-s[e].size>=0){for(let t=0;t<s[e].size;t++)s[e].position.push(c[i][a-t]),c[i][a-t]="X";if(0==i&&0==a){c[i+1][a+1]="Y";for(let t=0;t<s[e].size;t++)c[i+1][a-t]="Y"}else if(9==i&&a>0){c[i][a-s[e].size]="Y";for(let t=0;t<s[e].size;t++)c[i-1][a-t]="Y"}else if(9==i&&0==a)c[i][a+1]="Y",c[i][a-s[e].size]="Y";else if(0==i&&a>0){c[i][a+1]="Y",c[i][a-s[e].size]="Y";for(let t=0;t<s[e].size;t++)c[i+1][a-t]="Y"}else{c[i][a+1]="Y",c[i][a-s[e].size]="Y";for(let t=0;t<s[e].size;t++)c[i+1][a-t]="Y",c[i-1][a-t]="Y"}for(let e=0;e<s.length;e++)if(!s[e].position.every(d)){for(let e=0;e<s.length;e++)s[e].position.length=0;c.length=0,n(c),console.log(!1);break}console.log(s)}}}var t})();const p=[];n(p);let m,g=0;(()=>{for(let e=0;e<1e3;e++)for(let e=0;e<s.length;e++)for(let t=0;t<s[e].position.length;t++){let o,n;1==s[e].position[t].toString().split("").length?(o=0,n=s[e].position[t].toString().split("")[0]):(o=s[e].position[t].toString().split("")[0],n=s[e].position[t].toString().split("")[1]),g++,p[o][n]="X"}})(),console.log(p,g),e(o),t(i),document.addEventListener("dragstart",(e=>{m=e.target,e.target.style.opacity=.3}),!1),document.addEventListener("dragend",(e=>{e.target.style.opacity="",e.target.dataset.row=e.target.firstChild.dataset.row,e.target.dataset.column=e.target.firstChild.dataset.column}),!1),document.addEventListener("dragover",(e=>{e.preventDefault()}),!1),document.addEventListener("dragenter",(e=>{"gameField"==e.target.className&&(e.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(e=>{"gameField"==e.target.className&&(e.target.style.background="")}),!1);const h=e=>{const t=document.querySelector(".shipsStatus");t.textContent="";for(let o=0;o<e.length;o++)if(e[o].name){const n=document.createElement("div");n.classList.add("ship");const i=document.createElement("div");i.classList.add("shipName"),i.textContent=e[o].name,n.appendChild(i);const s=document.createElement("div");s.classList.add("shipSize"),s.textContent=e[o].position.length,n.appendChild(s),t.appendChild(n)}},u=e=>{const t=document.querySelector(".shipsStatusTwo");t.textContent="";for(let o=0;o<e.length;o++)if(e[o].name){const n=document.createElement("div");n.classList.add("ship");const i=document.createElement("div");i.classList.add("shipName"),i.textContent=e[o].name,n.appendChild(i);const s=document.createElement("div");s.classList.add("shipSize"),s.textContent=e[o].position.length,n.appendChild(s),t.appendChild(n)}};document.addEventListener("drop",(n=>{if(n.preventDefault(),"gameField"==n.target.className){n.target.style.background="",n.target.appendChild(m);let s=n.target.dataset.row+n.target.dataset.column,l=Number(s);for(let e=0;e<s.split("").length;e++)0==s.split("")[0]&&(s=s.split("")[1]);const a=n.target.firstChild.className.split(" ")[1];let r,d;for(let e=0;e<i.length;e++)i[e].name==a&&(r=i[e].size,d=e);const c=l,p=l+r-1,g=[];for(let e=c;e<=p;e++)g.push(e);t(i),((e,t,o,n,i,s)=>{for(let n=0;n<e.length;n++)if(e[n].includes(t))return!!e[n].includes(o)&&(s[i].land=!0,!0)})(o,c,p,0,d,i)?(n.target.style.background="",n.target.appendChild(m),m.parentNode.removeChild(m),((e,t,o,n,i,s)=>{for(let l=0;l<e.length;l++)for(let a=0;a<e[l].length;a++)if(e[l][a]==t)if(0==e[l][a]){for(let t=0;t<o;t++)s[n].position.push(e[l][a+t]),e[l][a+t]="x";e[l+1][a]="y";for(let t=0;t<o;t++)e[l+1][a+t]="y";e[l][a+o]="y"}else if(e[l][a]==e[0][a]){for(let t=0;t<o;t++)s[n].position.push(e[l][a+t]),e[l][a+t]="x";e[l+1][a]="y";for(let t=0;t<o;t++)e[l+1][a+t]="y";e[l][t-1]="y",e[l][i+1]="y"}else if(e[l][a]==e[9][a]&&0!=a){for(let t=0;t<o;t++)s[n].position.push(e[l][a+t]),e[l][a+t]="x";for(let t=0;t<o;t++)e[l-1][a+t]="y";e[l][o+a]="y",e[l][a-1]="y"}else if(e[l][a]==e[9][a]){for(let t=0;t<o;t++)s[n].position.push(e[l][a+t]),e[l][a+t]="x";for(let t=0;t<o;t++)e[l-1][a+t]="y";e[l][o]="y"}else{for(let t=0;t<o;t++)s[n].position.push(e[l][a+t]),e[l][a+t]="x";e[l+1][a]="y",e[l-1][a]="y",e[l][a-1]="y",e[l][a+o]="y";for(let t=0;t<o;t++)e[l+1][a+t]="y",e[l-1][a+t]="y"}})(o,c,r,d,p,i)):(n.target.style.background="",m.parentNode.removeChild(m),i[d].land=!1,t(i),e(o)),t(i)}e(o),(e=>{let t=0;for(let o=0;o<e.length;o++)e[o].position.length&&t++;return 5==t})(i)&&f()}),!1);const f=()=>{const e=document.querySelector(".ships");e.parentNode.removeChild(e);const t=document.createElement("div");t.classList.add("computerGameBoard"),document.querySelector(".gameBoardComputer").appendChild(t),(e=>{const t=document.querySelector(".computerGameBoard");t.textContent="";for(let o=0;o<10;o++)for(let n=0;n<10;n++)if("X"==e[o][n]){const e=document.createElement("div");e.classList.add("plays"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}else if("Y"==e[o][n]){const e=document.createElement("div");e.classList.add("blocked"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("field"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}})(p);const o=[...document.querySelector(".computerGameBoard").childNodes];h(i),u(s),o.forEach((e=>{e.addEventListener("click",(e=>{if(e.target.classList.contains("plays")){let t=[];const o=Number(String(e.target.dataset.row)+String(e.target.dataset.column));for(let e=0;e<s.length;e++)for(let t=0;t<s[e].position.length;t++)s[e].position[t]==o&&s[e].position.splice(t,1);e.target.classList.add("field"),e.target.classList.remove("plays");for(let e=0;e<s.length;e++)0==s[e].position.length&&t.push("true");if(5==t.length)return void C("you, [player]")}y(),h(i),u(s)}))}))},y=()=>{for(let e=0;e<1e3;e++){const e=Math.floor(99*Math.random());let t,o;if(l.findIndex((t=>t==e))>-1){let n=l.findIndex((t=>t==e));1==e.toString().split("").length?(t=0,o=Number(e.toString().split("")[0])):(t=Number(e.toString().split("")[0]),o=Number(e.toString().split("")[1]));let s=l.splice(n,1);if(s){for(let e=0;e<i.length;e++)for(let t=0;t<i[e].position.length;t++)if(i[e].position[t]==s){let o=[];i[e].position.splice(t,1);for(let e=0;e<i.length;e++)0==i[e].position.length&&o.push("true");return 5==o.length?void C("computer"):void 0}let e=[];for(let t=0;t<i.length;t++)for(let o=0;o<i[t].position.length;o++)e.push(i[t].position[o]);return void console.log("You not blow",l.length,e.length)}}}},C=e=>{const t=document.querySelector(".game"),o=document.createElement("div");o.classList.add("fixedWinnerPage");const n=document.createElement("h1");n.textContent=`The winner is [${e}]`,o.appendChild(n),t.appendChild(o)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,