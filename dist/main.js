(()=>{"use strict";const e=e=>{const t=document.querySelector(".gameboard");t.textContent="";for(let n=0;n<10;n++)for(let s=0;s<10;s++)if("x"==e[n][s]){const e=document.createElement("div");e.classList.add("checked"),e.dataset.row=n,e.dataset.column=s,t.appendChild(e)}else if("y"==e[n][s]){const e=document.createElement("div");e.classList.add("blocked"),e.dataset.row=n,e.dataset.column=s,t.appendChild(e)}else if("C"==e[n][s]){const e=document.createElement("div");e.classList.add("Clicked"),e.dataset.row=n,e.dataset.column=s,t.appendChild(e)}else if("D"==e[n][s]){const e=document.createElement("div");e.classList.add("delete"),e.dataset.row=n,e.dataset.column=s,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("gameField"),e.dataset.row=n,e.dataset.column=s,t.appendChild(e)}},t=e=>{const t=document.querySelector(".ships");t.textContent="";for(let n=0;n<e.length;n++)if(1==e[n].land);else{const s=document.createElement("div");s.classList.add("ship"),s.dataset.id=e[n].id,s.classList.add(e[n].name),s.style.gridTemplateColumns=`repeat(${e[n].size}, 1fr)`,s.style.width=`calc(${e[n].id} * 50px)`,s.style.height="50px",s.style.backgroundColor="black",s.draggable=!0;for(let t=0;t<e[n].size;t++){const e=document.createElement("div");e.classList.add("square"),s.appendChild(e)}t.appendChild(s)}},n=e=>{let t=0;for(let n=0;n<10;n++){const n=[];for(let e=0;e<10;e++)n.push(t),t++;e.push(n)}},s=e=>"Y"!=e,i=(e,t,i,o,l)=>{if(0==e&&0==t){i[e+1][t+1]="Y";for(let n=0;n<o[l].size;n++)i[e+1][t-n]="Y"}else if(9==e&&t>0){i[e][t-o[l].size]="Y";for(let n=0;n<o[l].size;n++)i[e-1][t-n]="Y"}else if(9==e&&0==t)i[e][t+1]="Y",i[e][t-o[l].size]="Y";else if(0==e&&t>0){i[e][t+1]="Y",i[e][t-o[l].size]="Y";for(let n=0;n<o[l].size;n++)i[e+1][t-n]="Y"}else{i[e][t+1]="Y",i[e][t-o[l].size]="Y";for(let n=0;n<o[l].size;n++)i[e+1][t-n]="Y",i[e-1][t-n]="Y"}for(let e=0;e<o.length;e++)if(!o[e].position.every(s)){for(let e=0;e<o.length;e++)o[e].position.length=0;i.length=0,n(i);break}},o=e=>{const t=document.querySelector(".shipsStatus");t.textContent="";for(let n=0;n<e.length;n++)if(e[n].name){const s=document.createElement("div");s.classList.add("ship");const i=document.createElement("div");i.classList.add("shipName"),i.textContent=e[n].name,s.appendChild(i);const o=document.createElement("div");o.classList.add("shipSize"),o.textContent=e[n].position.length,s.appendChild(o),t.appendChild(s)}},l=e=>{const t=document.querySelector(".shipsStatusTwo");t.textContent="";for(let n=0;n<e.length;n++)if(e[n].name){const s=document.createElement("div");s.classList.add("ship");const i=document.createElement("div");i.classList.add("shipName"),i.textContent=e[n].name,s.appendChild(i);const o=document.createElement("div");o.classList.add("shipSize"),o.textContent=e[n].position.length,s.appendChild(o),t.appendChild(s)}},a=()=>{const e=document.createElement("div");e.classList.add("container"),e.classList.add("visiblity");const t=document.createElement("div");t.classList.add("checkedField"),t.textContent="You cannot click on the field again",e.appendChild(t),document.body.appendChild(e)},d=e=>{const t=document.querySelector(".game"),n=document.createElement("div");n.classList.add("fixedWinnerPage");const s=document.createElement("div");s.classList.add("content");const i=document.createElement("h1");i.textContent=`The winner is [${e}]`;const o=document.createElement("button");o.textContent="reset",o.classList.add("reset"),s.appendChild(i),s.appendChild(o),n.appendChild(s),t.appendChild(n)},r=[];let c=[],p=[],m=[];const u=[],h=e=>{for(let t=0;t<100;t++)e.push(t)};n(r),n(m),n(u),h(p),h(c);const g=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}],f=[{name:"Destroyer",size:2,position:[]},{name:"Submarine",size:3,position:[]},{name:"Cruiser",size:3,position:[]},{name:"Battleship",size:4,position:[]},{name:"Carrier",size:5,position:[]}],C=e=>"X"!==e,y=()=>{let e=0;m.length=0,n(m);for(let n=0;n<1e3;n++){for(let e=0;e<f.length;e++)f[e].position.every(C)||(f[e].position.length=0);if(f[0].position.length&&f[1].position.length&&f[2].position.length&&f[3].position.length&&f[4].position.length){for(let t=0;t<10;t++)m[t].filter((e=>"X"==e))&&(e+=m[t].filter((e=>"X"==e)).length);return{computerArr:m,shipNameAndSizeComputer:f}}for(let e=0;e<f.length;e++)if(f[e].position.length>1);else{const n=(t=e,Math.floor(94*Math.random())+f[t].size);let s,o;1==n.toString().length?(s=0,o=Number(n.toString().split("")[0])):(s=Number(n.toString().split("")[0]),o=Number(n.toString().split("")[1]));const l=m[s].findIndex((e=>e==n));if(l>0&&l-f[e].size>=0){for(let t=0;t<f[e].size;t++)f[e].position.push(m[s][l-t]),m[s][l-t]="X";i(s,l,m,f,e)}}}var t};y();const v=()=>{for(let e=0;e<1e3;e++)for(let e=0;e<f.length;e++)for(let t=0;t<f[e].position.length;t++){let n,s;1==f[e].position[t].toString().split("").length?(n=0,s=f[e].position[t].toString().split("")[0]):(n=f[e].position[t].toString().split("")[0],s=f[e].position[t].toString().split("")[1]),u[n][s]="X"}};let L;v(),e(r),t(g),document.addEventListener("dragstart",(e=>{L=e.target,e.target.style.opacity=.3}),!1),document.addEventListener("dragend",(e=>{e.target.style.opacity="",e.target.dataset.row=e.target.firstChild.dataset.row,e.target.dataset.column=e.target.firstChild.dataset.column}),!1),document.addEventListener("dragover",(e=>{e.preventDefault()}),!1),document.addEventListener("dragenter",(e=>{"gameField"==e.target.className&&(e.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(e=>{"gameField"==e.target.className&&(e.target.style.background="")}),!1),document.addEventListener("drop",(n=>{if(n.preventDefault(),"gameField"==n.target.className){n.target.style.background="",n.target.appendChild(L);let s=n.target.dataset.row+n.target.dataset.column,i=Number(s);for(let e=0;e<s.split("").length;e++)0==s.split("")[0]&&(s=s.split("")[1]);const o=n.target.firstChild.className.split(" ")[1];let l,a;for(let e=0;e<g.length;e++)g[e].name==o&&(l=g[e].size,a=e);const d=i,c=i+l-1,p=[];for(let e=d;e<=c;e++)p.push(e);t(g),((e,t,n,s,i,o)=>{for(let s=0;s<e.length;s++)if(e[s].includes(t))return!!e[s].includes(n)&&(o[i].land=!0,!0)})(r,d,c,0,a,g)?(n.target.style.background="",n.target.appendChild(L),L.parentNode.removeChild(L),((e,t,n,s,i,o)=>{for(let l=0;l<e.length;l++)for(let a=0;a<e[l].length;a++)if(e[l][a]==t)if(0==e[l][a]){for(let t=0;t<n;t++)o[s].position.push(e[l][a+t]),e[l][a+t]="x";e[l+1][a]="y";for(let t=0;t<n;t++)e[l+1][a+t]="y";e[l][a+n]="y"}else if(e[l][a]==e[0][a]){for(let t=0;t<n;t++)o[s].position.push(e[l][a+t]),e[l][a+t]="x";e[l+1][a]="y";for(let t=0;t<n;t++)e[l+1][a+t]="y";e[l][t-1]="y",e[l][i+1]="y"}else if(e[l][a]==e[9][a]&&0!=a){for(let t=0;t<n;t++)o[s].position.push(e[l][a+t]),e[l][a+t]="x";for(let t=0;t<n;t++)e[l-1][a+t]="y";e[l][n+a]="y",e[l][a-1]="y"}else if(e[l][a]==e[9][a]){for(let t=0;t<n;t++)o[s].position.push(e[l][a+t]),e[l][a+t]="x";for(let t=0;t<n;t++)e[l-1][a+t]="y";e[l][n]="y"}else{for(let t=0;t<n;t++)o[s].position.push(e[l][a+t]),e[l][a+t]="x";e[l+1][a]="y",e[l-1][a]="y",e[l][a-1]="y",e[l][a+n]="y";for(let t=0;t<n;t++)e[l+1][a+t]="y",e[l-1][a+t]="y"}})(r,d,l,a,c,g)):(n.target.style.background="",L.parentNode.removeChild(L),g[a].land=!1,t(g),e(r)),t(g)}e(r),(e=>{let t=0;for(let n=0;n<e.length;n++)e[n].position.length&&t++;return 5==t})(g)&&S()}),!1),a();const S=()=>{const t=document.createElement("div");t.classList.add("computerGameBoard"),document.querySelector(".gameBoardComputer").appendChild(t),(e=>{const t=document.querySelector(".computerGameBoard");t.textContent="";for(let n=0;n<10;n++)for(let s=0;s<10;s++)if("X"==e[n][s]){const e=document.createElement("div");e.classList.add("plays"),e.dataset.row=n,e.dataset.column=s,t.appendChild(e)}else if("C"==e[n][s]){const e=document.createElement("div");e.classList.add("Clicked"),e.dataset.row=n,e.dataset.column=s,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("field"),e.dataset.row=n,e.dataset.column=s,t.appendChild(e)}})(u);const n=[...document.querySelector(".computerGameBoard").childNodes];o(g),l(f),n.forEach((t=>{t.addEventListener("click",(t=>{const n=document.querySelector(".container");if(n.classList.contains("visiblity")||n.classList.add("visiblity"),t.target.classList.contains("Clicked")||t.target.classList.contains("delete"))return n.classList.remove("visiblity"),void a();if(t.target.classList.contains("field")&&(t.target.classList.remove("field"),t.target.classList.add("Clicked")),t.target.classList.contains("plays")){let e=[];const n=Number(String(t.target.dataset.row)+String(t.target.dataset.column));for(let e=0;e<f.length;e++)for(let t=0;t<f[e].position.length;t++)f[e].position[t]==n&&f[e].position.splice(t,1);t.target.classList.remove("plays"),t.target.classList.add("delete");for(let t=0;t<f.length;t++)0==f[t].position.length&&e.push("true");if(5==e.length)return void d("you, [player]")}E(),e(r),o(g),l(f)}))}))},E=()=>{for(let e=0;e<1e3;e++){const e=Math.floor(99*Math.random());let t,n;if(c.findIndex((t=>t==e))>-1){let s=c.findIndex((t=>t==e));1==e.toString().split("").length?(t=0,n=Number(e.toString().split("")[0])):(t=Number(e.toString().split("")[0]),n=Number(e.toString().split("")[1]));let i=c.splice(s,1);if(r[t][n]="C",i){for(let e=0;e<g.length;e++)for(let s=0;s<g[e].position.length;s++)if(g[e].position[s]==i){let i=[];g[e].position.splice(s,1);for(let e=0;e<g.length;e++)0==g[e].position.length&&i.push("true");return r[t][n]="D",5==i.length?void d("computer"):void 0}let e=[];for(let t=0;t<g.length;t++)for(let n=0;n<g[t].position.length;n++)e.push(g[t].position[n]);return}}}};document.addEventListener("click",(e=>{e.target.classList.contains("reset")&&x()}));const x=()=>{const s=document.querySelector(".fixedWinnerPage");s.parentNode.removeChild(s),document.querySelector(".gameBoardComputer").textContent="",document.querySelector(".shipsStatusTwo").textContent="",document.querySelector(".shipsStatus").textContent="",m.length=0,r.length=0,n(m),n(r),p.length=0,c.length=0,u.length=0,n(u),h(p),h(c);for(let e=0;e<g.length;e++)g[e].position.length=0,f[e].position.length=0,g[e].land=!1;y(),v(),e(r),t(g),console.log(g)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFDM0NvRCxFQUFnQjZDLFdBQVdDLFlBQVk5QyxHQUVickQsU0FBU0MsY0FBYyxzQkFDL0JDLFlBQWMsR0FFVEYsU0FBU0MsY0FBYyxtQkFDL0JDLFlBQWMsR0FFVEYsU0FBU0MsY0FBYyxnQkFDL0JDLFlBQWMsR0FFMUJpQyxFQUFZcEIsT0FBUyxFQUNyQmpCLEVBQWNpQixPQUFTLEVBRXZCLEVBQWlCb0IsR0FDakIsRUFBaUJyQyxHQUVqQjRELEVBQWlCM0MsT0FBUyxFQUMxQjBDLEVBQW9CMUMsT0FBUyxFQUU3QjRDLEVBQWlCNUMsT0FBUyxFQUUxQixFQUFpQjRDLEdBRWpCQyxFQUFrQkYsR0FDbEJFLEVBQWtCSCxHQUVsQixJQUFJLElBQUl0RCxFQUFJLEVBQUdBLEVBQUlVLEVBQWdCRSxPQUFRWixJQUN2Q1UsRUFBZ0JWLEdBQUdvQyxTQUFTeEIsT0FBUyxFQUNyQ3FCLEVBQXdCakMsR0FBR29DLFNBQVN4QixPQUFTLEVBQzdDRixFQUFnQlYsR0FBR2EsTUFBTyxFQUc5QjhDLElBQ0FlLElBRUEsRUFBZ0IvRSxHQUNoQixFQUFXZSxHQUVYNEcsUUFBUUMsSUFBSTdHLEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2NvbXBvbmVudHMvZ2FtZUJvYXJkRmllbGRzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvY29tcG9uZW50cy9jcmVhdGVTaGlwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvY29tcG9uZW50cy9hZGRDb3VudEluQXJyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvY29tcG9uZW50cy9hZGRYQW5kWUluQ29tcHV0ZXJBcnIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9jb21wb25lbnRzL3NoaXBTdGF0dXNQbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9jb21wb25lbnRzL3NoaXBTdGF0dXNDb21wdXRlci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2NvbXBvbmVudHMvY2hlY2tlZEZpZWxkcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2NvbXBvbmVudHMvd2lubmVyUGFnZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvY29tcG9uZW50cy9pc1RydWUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9jb21wb25lbnRzL2FkZFlJbkFyci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2NvbXBvbmVudHMvY29tcHV0ZXJHYW1lQm9hcmRGaWVsZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBnYW1lQm9hcmRGaWVsZHMgPSAoZ2FtZUZpZWxkc0FycikgPT4ge1xyXG4gICAgY29uc3QgZ2FtZUJvYXJkQ2xhc3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FtZWJvYXJkJyk7XHJcblxyXG4gICAgZ2FtZUJvYXJkQ2xhc3MudGV4dENvbnRlbnQgPSAnJztcclxuXHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgMTA7IGkrKyl7XHJcbiAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IDEwOyBqKyspe1xyXG4gICAgICAgICAgICBpZihnYW1lRmllbGRzQXJyW2ldW2pdID09ICd4Jyl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBnYW1lRmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIGdhbWVGaWVsZC5jbGFzc0xpc3QuYWRkKCdjaGVja2VkJyk7XHJcbiAgICAgICAgICAgICAgICBnYW1lRmllbGQuZGF0YXNldC5yb3cgPSBpO1xyXG4gICAgICAgICAgICAgICAgZ2FtZUZpZWxkLmRhdGFzZXQuY29sdW1uID0gajtcclxuXHJcbiAgICAgICAgICAgICAgICBnYW1lQm9hcmRDbGFzcy5hcHBlbmRDaGlsZChnYW1lRmllbGQpO1xyXG4gICAgICAgICAgICB9ZWxzZSBpZihnYW1lRmllbGRzQXJyW2ldW2pdID09ICd5Jyl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBnYW1lRmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIGdhbWVGaWVsZC5jbGFzc0xpc3QuYWRkKCdibG9ja2VkJyk7XHJcbiAgICAgICAgICAgICAgICBnYW1lRmllbGQuZGF0YXNldC5yb3cgPSBpO1xyXG4gICAgICAgICAgICAgICAgZ2FtZUZpZWxkLmRhdGFzZXQuY29sdW1uID0gajtcclxuXHJcbiAgICAgICAgICAgICAgICBnYW1lQm9hcmRDbGFzcy5hcHBlbmRDaGlsZChnYW1lRmllbGQpO1xyXG4gICAgICAgICAgICB9ZWxzZSBpZihnYW1lRmllbGRzQXJyW2ldW2pdID09ICdDJyl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBnYW1lRmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIGdhbWVGaWVsZC5jbGFzc0xpc3QuYWRkKCdDbGlja2VkJyk7XHJcbiAgICAgICAgICAgICAgICBnYW1lRmllbGQuZGF0YXNldC5yb3cgPSBpO1xyXG4gICAgICAgICAgICAgICAgZ2FtZUZpZWxkLmRhdGFzZXQuY29sdW1uID0gajtcclxuXHJcbiAgICAgICAgICAgICAgICBnYW1lQm9hcmRDbGFzcy5hcHBlbmRDaGlsZChnYW1lRmllbGQpO1xyXG4gICAgICAgICAgICB9ZWxzZSBpZihnYW1lRmllbGRzQXJyW2ldW2pdID09ICdEJyl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBnYW1lRmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIGdhbWVGaWVsZC5jbGFzc0xpc3QuYWRkKCdkZWxldGUnKTtcclxuICAgICAgICAgICAgICAgIGdhbWVGaWVsZC5kYXRhc2V0LnJvdyA9IGk7XHJcbiAgICAgICAgICAgICAgICBnYW1lRmllbGQuZGF0YXNldC5jb2x1bW4gPSBqO1xyXG5cclxuICAgICAgICAgICAgICAgIGdhbWVCb2FyZENsYXNzLmFwcGVuZENoaWxkKGdhbWVGaWVsZCk7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ2FtZUZpZWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICBnYW1lRmllbGQuY2xhc3NMaXN0LmFkZCgnZ2FtZUZpZWxkJyk7XHJcbiAgICAgICAgICAgICAgICBnYW1lRmllbGQuZGF0YXNldC5yb3cgPSBpO1xyXG4gICAgICAgICAgICAgICAgZ2FtZUZpZWxkLmRhdGFzZXQuY29sdW1uID0gajtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZ2FtZUJvYXJkQ2xhc3MuYXBwZW5kQ2hpbGQoZ2FtZUZpZWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZ2FtZUJvYXJkRmllbGRzOyIsImNvbnN0IGNyZWF0ZVNoaXAgPSAoc2hpcE5hbWVBbmRTaXplKSA9PiB7XHJcbiAgICBjb25zdCBzaGlwc0NsYXNzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNoaXBzJyk7XHJcblxyXG4gICAgc2hpcHNDbGFzcy50ZXh0Q29udGVudCA9ICcnO1xyXG5cclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaGlwTmFtZUFuZFNpemUubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgIGlmKHNoaXBOYW1lQW5kU2l6ZVtpXS5sYW5kID09IHRydWUpe1xyXG5cclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgY29uc3Qgc2hpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBzaGlwLmNsYXNzTGlzdC5hZGQoJ3NoaXAnKTtcclxuICAgICAgICAgICAgc2hpcC5kYXRhc2V0LmlkID0gc2hpcE5hbWVBbmRTaXplW2ldLmlkO1xyXG4gICAgICAgICAgICBzaGlwLmNsYXNzTGlzdC5hZGQoc2hpcE5hbWVBbmRTaXplW2ldLm5hbWUpO1xyXG4gICAgICAgICAgICBzaGlwLnN0eWxlLmdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBgcmVwZWF0KCR7c2hpcE5hbWVBbmRTaXplW2ldLnNpemV9LCAxZnIpYDtcclxuICAgICAgICAgICAgc2hpcC5zdHlsZS53aWR0aCA9IGBjYWxjKCR7c2hpcE5hbWVBbmRTaXplW2ldLmlkfSAqIDUwcHgpYDtcclxuICAgICAgICAgICAgc2hpcC5zdHlsZS5oZWlnaHQgPSAnNTBweCc7XHJcbiAgICAgICAgICAgIHNoaXAuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ2JsYWNrJzsgXHJcbiAgICAgICAgICAgIHNoaXAuZHJhZ2dhYmxlID0gdHJ1ZTtcclxuXHJcblxyXG4gICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgc2hpcE5hbWVBbmRTaXplW2ldLnNpemU7IGorKyl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzcXVhcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIHNxdWFyZS5jbGFzc0xpc3QuYWRkKCdzcXVhcmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzaGlwLmFwcGVuZENoaWxkKHNxdWFyZSk7XHJcbiAgICAgICAgICAgIH0gICBcclxuXHJcbiAgICAgICAgICAgIHNoaXBzQ2xhc3MuYXBwZW5kQ2hpbGQoc2hpcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTaGlwOyIsImNvbnN0IGFkZENvdW50SW5UZW5BcnIgPSAoYXJyKSA9PiB7XHJcbiAgICBsZXQgY291bnQgPSAwO1xyXG5cclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKXtcclxuICAgICAgICBjb25zdCBuZXdBcnIgPSBbXTtcclxuICAgIFxyXG4gICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCAxMDsgaisrKXtcclxuICAgICAgICAgICAgbmV3QXJyLnB1c2goY291bnQpO1xyXG4gICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhcnIucHVzaChuZXdBcnIpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhZGRDb3VudEluVGVuQXJyOyIsImltcG9ydCBhZGRDb3VudEluVGVuQXJyIGZyb20gXCIuL2FkZENvdW50SW5BcnJcIjtcclxuXHJcbmNvbnN0IG5vdFkgPSAoaXRlbSkgPT4ge1xyXG4gICAgcmV0dXJuIGl0ZW0gIT0gJ1knO1xyXG59XHJcblxyXG5jb25zdCBhZGRYQW5kWUluQ29tcHV0ZXJBcnIgPSAocm93LCBmaW5kSW5kZXhDb21wdXRlciwgY29tcHV0ZXJBcnIsIHNoaXBOYW1lQW5kU2l6ZUNvbXB1dGVyLCBpKSA9PiB7XHJcbiAgICBpZihyb3cgPT0gMCAmJiBmaW5kSW5kZXhDb21wdXRlciA9PSAwKXtcclxuICAgICAgICBjb21wdXRlckFycltyb3cgKyAxXVtmaW5kSW5kZXhDb21wdXRlciArIDFdID0gJ1knO1xyXG4gICAgICAgIGZvcihsZXQgcSA9IDA7IHEgPCBzaGlwTmFtZUFuZFNpemVDb21wdXRlcltpXS5zaXplOyBxKyspe1xyXG4gICAgICAgICAgICBjb21wdXRlckFycltyb3cgKyAxXVtmaW5kSW5kZXhDb21wdXRlciAtIHFdID0gJ1knO1xyXG4gICAgICAgIH1cclxuICAgIH1lbHNlIGlmKHJvdyA9PSA5ICYmIGZpbmRJbmRleENvbXB1dGVyID4gMCl7XHJcbiAgICAgICAgY29tcHV0ZXJBcnJbcm93XVtmaW5kSW5kZXhDb21wdXRlciAtIHNoaXBOYW1lQW5kU2l6ZUNvbXB1dGVyW2ldLnNpemVdID0gJ1knO1xyXG4gICAgICAgIGZvcihsZXQgcSA9IDA7IHEgPCBzaGlwTmFtZUFuZFNpemVDb21wdXRlcltpXS5zaXplOyBxKyspe1xyXG4gICAgICAgICAgICBjb21wdXRlckFycltyb3cgLSAxXVtmaW5kSW5kZXhDb21wdXRlciAtIHFdID0gJ1knO1xyXG4gICAgICAgIH1cclxuICAgIH1lbHNlIGlmKHJvdyA9PSA5ICYmIGZpbmRJbmRleENvbXB1dGVyID09IDApe1xyXG4gICAgICAgIGNvbXB1dGVyQXJyW3Jvd11bZmluZEluZGV4Q29tcHV0ZXIgKyAxXSA9ICdZJztcclxuICAgICAgICBjb21wdXRlckFycltyb3ddW2ZpbmRJbmRleENvbXB1dGVyIC0gc2hpcE5hbWVBbmRTaXplQ29tcHV0ZXJbaV0uc2l6ZV0gPSAnWSc7XHJcbiAgICB9ZWxzZSBpZihyb3cgPT0gMCAmJiBmaW5kSW5kZXhDb21wdXRlciA+IDApe1xyXG4gICAgICAgIGNvbXB1dGVyQXJyW3Jvd11bZmluZEluZGV4Q29tcHV0ZXIgKyAxXSA9ICdZJztcclxuICAgICAgICBjb21wdXRlckFycltyb3ddW2ZpbmRJbmRleENvbXB1dGVyIC0gc2hpcE5hbWVBbmRTaXplQ29tcHV0ZXJbaV0uc2l6ZV0gPSAnWSc7XHJcbiAgICAgICAgZm9yKGxldCBxID0gMDsgcSA8IHNoaXBOYW1lQW5kU2l6ZUNvbXB1dGVyW2ldLnNpemU7IHErKyl7XHJcbiAgICAgICAgICAgIGNvbXB1dGVyQXJyW3JvdyArIDFdW2ZpbmRJbmRleENvbXB1dGVyIC0gcV0gPSAnWSc7XHJcbiAgICAgICAgfVxyXG4gICAgfWVsc2V7XHJcbiAgICAgICAgY29tcHV0ZXJBcnJbcm93XVtmaW5kSW5kZXhDb21wdXRlciArIDFdID0gJ1knO1xyXG4gICAgICAgIGNvbXB1dGVyQXJyW3Jvd11bZmluZEluZGV4Q29tcHV0ZXIgLSBzaGlwTmFtZUFuZFNpemVDb21wdXRlcltpXS5zaXplXSA9ICdZJztcclxuICAgICAgICBmb3IobGV0IHEgPSAwOyBxIDwgc2hpcE5hbWVBbmRTaXplQ29tcHV0ZXJbaV0uc2l6ZTsgcSsrKXtcclxuICAgICAgICAgICAgY29tcHV0ZXJBcnJbcm93ICsgMV1bZmluZEluZGV4Q29tcHV0ZXIgLSBxXSA9ICdZJztcclxuICAgICAgICAgICAgY29tcHV0ZXJBcnJbcm93IC0gMV1bZmluZEluZGV4Q29tcHV0ZXIgLSBxXSA9ICdZJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IobGV0IGUgPSAwOyBlIDwgc2hpcE5hbWVBbmRTaXplQ29tcHV0ZXIubGVuZ3RoOyBlKyspe1xyXG4gICAgICAgIGlmKCFzaGlwTmFtZUFuZFNpemVDb21wdXRlcltlXS5wb3NpdGlvbi5ldmVyeShub3RZKSl7XHJcbiAgICAgICAgICAgIGZvcihsZXQgYyA9IDA7IGMgPCBzaGlwTmFtZUFuZFNpemVDb21wdXRlci5sZW5ndGg7IGMrKyl7XHJcbiAgICAgICAgICAgICAgICBzaGlwTmFtZUFuZFNpemVDb21wdXRlcltjXS5wb3NpdGlvbi5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbXB1dGVyQXJyLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIGFkZENvdW50SW5UZW5BcnIoY29tcHV0ZXJBcnIpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhZGRYQW5kWUluQ29tcHV0ZXJBcnI7IiwiY29uc3Qgc2hpcFN0YXR1c1BsYXllciA9IChvYmopID0+IHtcclxuICAgIGNvbnN0IHNoaXBzU3RhdHVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNoaXBzU3RhdHVzJyk7XHJcbiAgICBzaGlwc1N0YXR1cy50ZXh0Q29udGVudCA9ICcnO1xyXG5cclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgIGlmKG9ialtpXS5uYW1lKXtcclxuICAgICAgICAgICAgY29uc3Qgc2hpcFN0YXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgc2hpcFN0YXQuY2xhc3NMaXN0LmFkZCgnc2hpcCcpO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2hpcE5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgc2hpcE5hbWUuY2xhc3NMaXN0LmFkZCgnc2hpcE5hbWUnKTtcclxuICAgICAgICAgICAgc2hpcE5hbWUudGV4dENvbnRlbnQgPSBvYmpbaV0ubmFtZTtcclxuXHJcbiAgICAgICAgICAgIHNoaXBTdGF0LmFwcGVuZENoaWxkKHNoaXBOYW1lKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNoaXBTaXplID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHNoaXBTaXplLmNsYXNzTGlzdC5hZGQoJ3NoaXBTaXplJyk7XHJcbiAgICAgICAgICAgIHNoaXBTaXplLnRleHRDb250ZW50ID0gb2JqW2ldLnBvc2l0aW9uLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIHNoaXBTdGF0LmFwcGVuZENoaWxkKHNoaXBTaXplKTtcclxuXHJcbiAgICAgICAgICAgIHNoaXBzU3RhdHVzLmFwcGVuZENoaWxkKHNoaXBTdGF0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHNoaXBTdGF0dXNQbGF5ZXI7IiwiY29uc3Qgc2hpcFN0YXR1c0NvbXB1dGVyID0gKG9iaikgPT4ge1xyXG4gICAgY29uc3Qgc2hpcHNTdGF0dXNUd28gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2hpcHNTdGF0dXNUd28nKTtcclxuICAgIHNoaXBzU3RhdHVzVHdvLnRleHRDb250ZW50ID0gJyc7XHJcblxyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgaWYob2JqW2ldLm5hbWUpe1xyXG4gICAgICAgICAgICBjb25zdCBzaGlwU3RhdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBzaGlwU3RhdC5jbGFzc0xpc3QuYWRkKCdzaGlwJyk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzaGlwTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBzaGlwTmFtZS5jbGFzc0xpc3QuYWRkKCdzaGlwTmFtZScpO1xyXG4gICAgICAgICAgICBzaGlwTmFtZS50ZXh0Q29udGVudCA9IG9ialtpXS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgc2hpcFN0YXQuYXBwZW5kQ2hpbGQoc2hpcE5hbWUpO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2hpcFNpemUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgc2hpcFNpemUuY2xhc3NMaXN0LmFkZCgnc2hpcFNpemUnKTtcclxuICAgICAgICAgICAgc2hpcFNpemUudGV4dENvbnRlbnQgPSBvYmpbaV0ucG9zaXRpb24ubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgc2hpcFN0YXQuYXBwZW5kQ2hpbGQoc2hpcFNpemUpO1xyXG5cclxuICAgICAgICAgICAgc2hpcHNTdGF0dXNUd28uYXBwZW5kQ2hpbGQoc2hpcFN0YXQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgc2hpcFN0YXR1c0NvbXB1dGVyOyIsImNvbnN0IGNoZWNrZWRGaWVsZHMgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdjb250YWluZXInKTtcclxuICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd2aXNpYmxpdHknKTtcclxuXHJcbiAgICBjb25zdCBjaGVja2VkRmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGNoZWNrZWRGaWVsZC5jbGFzc0xpc3QuYWRkKCdjaGVja2VkRmllbGQnKTtcclxuICAgIGNoZWNrZWRGaWVsZC50ZXh0Q29udGVudCA9ICdZb3UgY2Fubm90IGNsaWNrIG9uIHRoZSBmaWVsZCBhZ2Fpbic7XHJcblxyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNoZWNrZWRGaWVsZCk7XHJcblxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjaGVja2VkRmllbGRzOyIsImNvbnN0IHdpbm5lclBhZ2UgPSAod2lubmVyKSA9PiB7XHJcbiAgICBjb25zdCBnYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdhbWUnKTtcclxuICAgIFxyXG4gICAgY29uc3QgZml4ZWRXaW5uZXJQYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBmaXhlZFdpbm5lclBhZ2UuY2xhc3NMaXN0LmFkZCgnZml4ZWRXaW5uZXJQYWdlJyk7XHJcbiAgICBcclxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoJ2NvbnRlbnQnKTtcclxuICAgIFxyXG4gICAgY29uc3QgaDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMScpO1xyXG4gICAgaDEudGV4dENvbnRlbnQgPSBgVGhlIHdpbm5lciBpcyBbJHt3aW5uZXJ9XWA7XHJcblxyXG4gICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICBidXR0b24udGV4dENvbnRlbnQgPSAncmVzZXQnO1xyXG4gICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3Jlc2V0Jyk7XHJcblxyXG4gICAgZGl2LmFwcGVuZENoaWxkKGgxKTtcclxuICAgIFxyXG4gICAgZGl2LmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcblxyXG4gICAgZml4ZWRXaW5uZXJQYWdlLmFwcGVuZENoaWxkKGRpdik7XHJcblxyXG4gICAgZ2FtZS5hcHBlbmRDaGlsZChmaXhlZFdpbm5lclBhZ2UpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB3aW5uZXJQYWdlOyIsImltcG9ydCBnYW1lQm9hcmRGaWVsZHMgZnJvbSBcIi4vY29tcG9uZW50cy9nYW1lQm9hcmRGaWVsZHNcIjtcclxuaW1wb3J0IGNyZWF0ZVNoaXAgZnJvbSBcIi4vY29tcG9uZW50cy9jcmVhdGVTaGlwXCI7XHJcbmltcG9ydCBjb21wdXRlckdhbWVCb2FyZEZpZWxkIGZyb20gXCIuL2NvbXBvbmVudHMvY29tcHV0ZXJHYW1lQm9hcmRGaWVsZFwiO1xyXG5pbXBvcnQgYWRkWUluQXJyIGZyb20gXCIuL2NvbXBvbmVudHMvYWRkWUluQXJyXCI7XHJcbmltcG9ydCBpc1RydWUgZnJvbSBcIi4vY29tcG9uZW50cy9pc1RydWVcIjtcclxuaW1wb3J0IGFkZENvdW50SW5UZW5BcnIgZnJvbSBcIi4vY29tcG9uZW50cy9hZGRDb3VudEluQXJyXCI7XHJcbmltcG9ydCBhZGRYQW5kWUluQ29tcHV0ZXJBcnIgZnJvbSBcIi4vY29tcG9uZW50cy9hZGRYQW5kWUluQ29tcHV0ZXJBcnJcIjtcclxuaW1wb3J0IHNoaXBTdGF0dXNQbGF5ZXIgZnJvbSBcIi4vY29tcG9uZW50cy9zaGlwU3RhdHVzUGxheWVyXCI7XHJcbmltcG9ydCBzaGlwU3RhdHVzQ29tcHV0ZXIgZnJvbSBcIi4vY29tcG9uZW50cy9zaGlwU3RhdHVzQ29tcHV0ZXJcIjtcclxuaW1wb3J0IGNoZWNrZWRGaWVsZHMgZnJvbSBcIi4vY29tcG9uZW50cy9jaGVja2VkRmllbGRzXCI7XHJcbmltcG9ydCB3aW5uZXJQYWdlIGZyb20gXCIuL2NvbXBvbmVudHMvd2lubmVyUGFnZVwiO1xyXG5cclxuY29uc3QgZ2FtZUZpZWxkc0FyciA9IFtdO1xyXG5sZXQgY29tcHV0ZXJQbGF5c1JhbmRvbSA9IFtdO1xyXG5sZXQgcGxheWVySW5kZXhQbGF5cyA9IFtdO1xyXG5sZXQgY29tcHV0ZXJBcnIgPSBbXTtcclxuY29uc3QgY29wcHlDb21wdXRlckFyciA9IFtdO1xyXG5cclxuY29uc3QgYWRkSHVuZHJlZE51bWJlcnMgPSAoYXJyKSA9PiB7XHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgMTAwOyBpKyspe1xyXG4gICAgICAgIGFyci5wdXNoKGkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5hZGRDb3VudEluVGVuQXJyKGdhbWVGaWVsZHNBcnIpO1xyXG5hZGRDb3VudEluVGVuQXJyKGNvbXB1dGVyQXJyKTtcclxuYWRkQ291bnRJblRlbkFycihjb3BweUNvbXB1dGVyQXJyKTtcclxuXHJcbmFkZEh1bmRyZWROdW1iZXJzKHBsYXllckluZGV4UGxheXMpO1xyXG5hZGRIdW5kcmVkTnVtYmVycyhjb21wdXRlclBsYXlzUmFuZG9tKTtcclxuXHJcbmNvbnN0IHNoaXBOYW1lQW5kU2l6ZSA9IFtcclxuICAgIHtuYW1lOiAnRGVzdHJveWVyJywgc2l6ZTogMiwgaWQ6IDIsIGxhbmQ6IGZhbHNlLCBwb3NpdGlvbjogW119LFxyXG4gICAge25hbWU6ICdTdWJtYXJpbmUnLCBzaXplOiAzLCBpZDogMywgbGFuZDogZmFsc2UsIHBvc2l0aW9uOiBbXX0sXHJcbiAgICB7bmFtZTogJ0NydWlzZXInLCBzaXplOiAzLCBpZDogMywgbGFuZDogZmFsc2UsIHBvc2l0aW9uOiBbXX0sXHJcbiAgICB7bmFtZTogJ0JhdHRsZXNoaXAnLCBzaXplOiA0LCBpZDogNCwgbGFuZDogZmFsc2UsIHBvc2l0aW9uOiBbXX0sXHJcbiAgICB7bmFtZTogJ0NhcnJpZXInLCBzaXplOiA1LCBpZDogNSwgbGFuZDogZmFsc2UsIHBvc2l0aW9uOiBbXX0sXHJcbl1cclxuXHJcbmNvbnN0IHNoaXBOYW1lQW5kU2l6ZUNvbXB1dGVyID0gW1xyXG4gICAge25hbWU6ICdEZXN0cm95ZXInLCBzaXplOiAyLCBwb3NpdGlvbjogW119LFxyXG4gICAge25hbWU6ICdTdWJtYXJpbmUnLCBzaXplOiAzLCBwb3NpdGlvbjogW119LFxyXG4gICAge25hbWU6ICdDcnVpc2VyJywgc2l6ZTogMywgcG9zaXRpb246IFtdfSxcclxuICAgIHtuYW1lOiAnQmF0dGxlc2hpcCcsIHNpemU6IDQsIHBvc2l0aW9uOiBbXX0sXHJcbiAgICB7bmFtZTogJ0NhcnJpZXInLCBzaXplOiA1LCBwb3NpdGlvbjogW119LFxyXG5dXHJcblxyXG5jb25zdCB0cnVlT3JGYWxzZSA9IChpdGVtKSA9PiB7XHJcbiAgICByZXR1cm4gaXRlbSAhPT0gJ1gnO1xyXG59XHJcblxyXG5jb25zdCBub3RZID0gKGl0ZW0pID0+IHtcclxuICAgIHJldHVybiBpdGVtICE9ICdZJztcclxufVxyXG5cclxuY29uc3QgcmFuZG9tUG9zaXRpb24gPSAobnVtKSA9PiB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogOTQpICsgc2hpcE5hbWVBbmRTaXplQ29tcHV0ZXJbbnVtXS5zaXplO1xyXG59XHJcblxyXG5jb25zdCBjb21wdXRlciA9ICgpID0+IHtcclxuICAgIGxldCBjb3VudEFyciA9IDA7XHJcbiAgICBjb21wdXRlckFyci5sZW5ndGggPSAwO1xyXG5cclxuICAgIGFkZENvdW50SW5UZW5BcnIoY29tcHV0ZXJBcnIpO1xyXG5cclxuICAgIGZvcihsZXQgYiA9IDA7IGIgPCAxMDAwOyBiKyspe1xyXG4gICAgICAgIGZvcihsZXQgeCA9IDA7IHggPCBzaGlwTmFtZUFuZFNpemVDb21wdXRlci5sZW5ndGg7IHgrKyl7XHJcbiAgICAgICAgICAgIGlmKCFzaGlwTmFtZUFuZFNpemVDb21wdXRlclt4XS5wb3NpdGlvbi5ldmVyeSh0cnVlT3JGYWxzZSkpe1xyXG4gICAgICAgICAgICAgICAgc2hpcE5hbWVBbmRTaXplQ29tcHV0ZXJbeF0ucG9zaXRpb24ubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoc2hpcE5hbWVBbmRTaXplQ29tcHV0ZXJbMF0ucG9zaXRpb24ubGVuZ3RoICYmIHNoaXBOYW1lQW5kU2l6ZUNvbXB1dGVyWzFdLnBvc2l0aW9uLmxlbmd0aCAmJiBzaGlwTmFtZUFuZFNpemVDb21wdXRlclsyXS5wb3NpdGlvbi5sZW5ndGggJiYgc2hpcE5hbWVBbmRTaXplQ29tcHV0ZXJbM10ucG9zaXRpb24ubGVuZ3RoICYmIHNoaXBOYW1lQW5kU2l6ZUNvbXB1dGVyWzRdLnBvc2l0aW9uLmxlbmd0aCl7XHJcbiAgICAgICAgICAgIGZvcihsZXQgbyA9IDA7IG8gPCAxMDsgbysrKXtcclxuICAgICAgICAgICAgICAgIGlmKGNvbXB1dGVyQXJyW29dLmZpbHRlcihpdGVtID0+ICBpdGVtID09ICdYJykpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50QXJyICs9IGNvbXB1dGVyQXJyW29dLmZpbHRlcihpdGVtID0+IGl0ZW0gPT0gJ1gnKS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgY29tcHV0ZXJBcnIsXHJcbiAgICAgICAgICAgICAgICBzaGlwTmFtZUFuZFNpemVDb21wdXRlcixcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXBOYW1lQW5kU2l6ZUNvbXB1dGVyLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGlmKHNoaXBOYW1lQW5kU2l6ZUNvbXB1dGVyW2ldLnBvc2l0aW9uLmxlbmd0aCA+IDEpe1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJhbmRvbVBvc2l0aW9uKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByb3c7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbHVtbjtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZS50b1N0cmluZygpLmxlbmd0aCA9PSAxKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uID0gTnVtYmVyKHZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoJycpWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93ID0gTnVtYmVyKHZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoJycpWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uID0gTnVtYmVyKHZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoJycpWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmluZEluZGV4Q29tcHV0ZXIgPSBjb21wdXRlckFycltyb3ddLmZpbmRJbmRleChpdGVtID0+IGl0ZW0gPT0gdmFsdWUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGZpbmRJbmRleENvbXB1dGVyID4gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGZpbmRJbmRleENvbXB1dGVyIC0gc2hpcE5hbWVBbmRTaXplQ29tcHV0ZXJbaV0uc2l6ZSA+PSAwKXsgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IHNoaXBOYW1lQW5kU2l6ZUNvbXB1dGVyW2ldLnNpemU7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hpcE5hbWVBbmRTaXplQ29tcHV0ZXJbaV0ucG9zaXRpb24ucHVzaChjb21wdXRlckFycltyb3ddW2ZpbmRJbmRleENvbXB1dGVyIC0gal0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVyQXJyW3Jvd11bZmluZEluZGV4Q29tcHV0ZXIgLSBqXSA9ICdYJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkWEFuZFlJbkNvbXB1dGVyQXJyKHJvdywgZmluZEluZGV4Q29tcHV0ZXIsIGNvbXB1dGVyQXJyLCBzaGlwTmFtZUFuZFNpemVDb21wdXRlciwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuY29tcHV0ZXIoKTtcclxuXHJcbmNvbnN0IGNvbXB1dGVyQXJyVHdvID0gKCkgPT4ge1xyXG4gICAgZm9yKGxldCBoID0gMDsgaCA8IDEwMDA7IGgrKyl7XHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXBOYW1lQW5kU2l6ZUNvbXB1dGVyLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IHNoaXBOYW1lQW5kU2l6ZUNvbXB1dGVyW2ldLnBvc2l0aW9uLmxlbmd0aDsgaisrKXsgXHJcbiAgICAgICAgICAgICAgICBsZXQgcm93O1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbHVtbjtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmKHNoaXBOYW1lQW5kU2l6ZUNvbXB1dGVyW2ldLnBvc2l0aW9uW2pdLnRvU3RyaW5nKCkuc3BsaXQoJycpLmxlbmd0aCA9PSAxKXtcclxuICAgICAgICAgICAgICAgICAgICByb3cgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbiA9IHNoaXBOYW1lQW5kU2l6ZUNvbXB1dGVyW2ldLnBvc2l0aW9uW2pdLnRvU3RyaW5nKCkuc3BsaXQoJycpWzBdO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93ID0gc2hpcE5hbWVBbmRTaXplQ29tcHV0ZXJbaV0ucG9zaXRpb25bal0udG9TdHJpbmcoKS5zcGxpdCgnJylbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uID0gc2hpcE5hbWVBbmRTaXplQ29tcHV0ZXJbaV0ucG9zaXRpb25bal0udG9TdHJpbmcoKS5zcGxpdCgnJylbMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGNvcHB5Q29tcHV0ZXJBcnJbcm93XVtjb2x1bW5dID0gJ1gnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmNvbXB1dGVyQXJyVHdvKCk7XHJcblxyXG5sZXQgZHJhZ2dlZDtcclxuXHJcbmdhbWVCb2FyZEZpZWxkcyhnYW1lRmllbGRzQXJyKTtcclxuY3JlYXRlU2hpcChzaGlwTmFtZUFuZFNpemUpO1xyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdzdGFydFwiLCAoZSkgPT4ge1xyXG4gICAgZHJhZ2dlZCA9IGUudGFyZ2V0O1xyXG5cclxuICAgIGUudGFyZ2V0LnN0eWxlLm9wYWNpdHkgPSAuMztcclxuXHJcbn0sIGZhbHNlKTtcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnZW5kXCIsIChlKSA9PiB7XHJcbiAgICBlLnRhcmdldC5zdHlsZS5vcGFjaXR5ID0gXCJcIjtcclxuICAgIGUudGFyZ2V0LmRhdGFzZXQucm93ID0gZS50YXJnZXQuZmlyc3RDaGlsZC5kYXRhc2V0LnJvdztcclxuICAgIGUudGFyZ2V0LmRhdGFzZXQuY29sdW1uID0gZS50YXJnZXQuZmlyc3RDaGlsZC5kYXRhc2V0LmNvbHVtbjtcclxufSwgZmFsc2UpO1xyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdvdmVyXCIsIChlKSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbn0sIGZhbHNlKTtcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnZW50ZXJcIiwgKGUpID0+IHtcclxuICAgIGlmKGUudGFyZ2V0LmNsYXNzTmFtZSA9PSBcImdhbWVGaWVsZFwiKXtcclxuICAgICAgICBlLnRhcmdldC5zdHlsZS5iYWNrZ3JvdW5kID0gXCJ5ZWxsb3dcIjtcclxuICAgIH1cclxufSwgZmFsc2UpO1xyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdsZWF2ZVwiLCAoZSkgPT4ge1xyXG4gICAgaWYoZS50YXJnZXQuY2xhc3NOYW1lID09IFwiZ2FtZUZpZWxkXCIpe1xyXG4gICAgICAgIGUudGFyZ2V0LnN0eWxlLmJhY2tncm91bmQgPSBcIlwiO1xyXG4gICAgfVxyXG59LCBmYWxzZSk7XHJcblxyXG5jb25zdCBpc1Bvc2l0aW9uVHJ1ZSA9IChzaGlwTmFtZUFuZFNpemUpID0+IHtcclxuICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2hpcE5hbWVBbmRTaXplLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICBpZihzaGlwTmFtZUFuZFNpemVbaV0ucG9zaXRpb24ubGVuZ3RoKXtcclxuICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYoY291bnQgPT0gNSl7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIChlKSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgaWYoZS50YXJnZXQuY2xhc3NOYW1lID09ICdnYW1lRmllbGQnKXtcclxuICAgICAgICBlLnRhcmdldC5zdHlsZS5iYWNrZ3JvdW5kID0gXCJcIjtcclxuICAgICAgICBlLnRhcmdldC5hcHBlbmRDaGlsZChkcmFnZ2VkKTtcclxuXHJcbiAgICAgICAgbGV0IHNoaXBJc0dvb2RTaXplID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IHJlc3VsdFBvc2l0aW9uID0gZS50YXJnZXQuZGF0YXNldC5yb3cgKyBlLnRhcmdldC5kYXRhc2V0LmNvbHVtbjtcclxuICAgICAgICBsZXQgc3RyaW5nVG9JbnQgPSBOdW1iZXIocmVzdWx0UG9zaXRpb24pO1xyXG4gICAgXHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHJlc3VsdFBvc2l0aW9uLnNwbGl0KCcnKS5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgIGlmKHJlc3VsdFBvc2l0aW9uLnNwbGl0KCcnKVswXSA9PSAwKXtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFBvc2l0aW9uID0gcmVzdWx0UG9zaXRpb24uc3BsaXQoJycpWzFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAgIFxyXG5cclxuICAgICAgICBjb25zdCBuYW1lU2hpcCA9IGUudGFyZ2V0LmZpcnN0Q2hpbGQuY2xhc3NOYW1lLnNwbGl0KCcgJylbMV07XHJcbiAgICAgICAgbGV0IGxlbmd0aFNoaXA7XHJcbiAgICAgICAgbGV0IGluZGV4T2JqO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBzaGlwTmFtZUFuZFNpemUubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICBpZihzaGlwTmFtZUFuZFNpemVbal0ubmFtZSA9PSBuYW1lU2hpcCl7XHJcbiAgICAgICAgICAgICAgICBsZW5ndGhTaGlwID0gc2hpcE5hbWVBbmRTaXplW2pdLnNpemU7XHJcbiAgICAgICAgICAgICAgICBpbmRleE9iaiA9IGpcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmaXJzdFBvc2l0aW9uID0gc3RyaW5nVG9JbnQ7XHJcbiAgICAgICAgY29uc3QgbGFzdFNoaXBQb3NpdGlvbiA9IHN0cmluZ1RvSW50ICsgbGVuZ3RoU2hpcCAtIDE7XHJcbiAgICAgICAgY29uc3Qgc2hpcEFyclBvc2l0aW9uID0gW107XHJcblxyXG4gICAgICAgIGZvcihsZXQgeCA9IGZpcnN0UG9zaXRpb247IHggPD0gbGFzdFNoaXBQb3NpdGlvbjsgeCsrKXtcclxuICAgICAgICAgICAgc2hpcEFyclBvc2l0aW9uLnB1c2goeCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjcmVhdGVTaGlwKHNoaXBOYW1lQW5kU2l6ZSk7XHJcblxyXG4gICAgICAgIGlmKCFpc1RydWUoZ2FtZUZpZWxkc0FyciwgZmlyc3RQb3NpdGlvbiwgbGFzdFNoaXBQb3NpdGlvbiwgc2hpcElzR29vZFNpemUsIGluZGV4T2JqLCBzaGlwTmFtZUFuZFNpemUpKXtcclxuICAgICAgICAgICAgZS50YXJnZXQuc3R5bGUuYmFja2dyb3VuZCA9IFwiXCI7XHJcbiAgICAgICAgICAgIGRyYWdnZWQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkcmFnZ2VkKTtcclxuICAgICAgICAgICAgc2hpcE5hbWVBbmRTaXplW2luZGV4T2JqXS5sYW5kID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNyZWF0ZVNoaXAoc2hpcE5hbWVBbmRTaXplKTtcclxuICAgICAgICAgICAgZ2FtZUJvYXJkRmllbGRzKGdhbWVGaWVsZHNBcnIpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBlLnRhcmdldC5zdHlsZS5iYWNrZ3JvdW5kID0gXCJcIjtcclxuICAgICAgICAgICAgZS50YXJnZXQuYXBwZW5kQ2hpbGQoZHJhZ2dlZCk7XHJcbiAgICAgICAgICAgIGRyYWdnZWQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkcmFnZ2VkKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGFkZFlJbkFycihnYW1lRmllbGRzQXJyLCBmaXJzdFBvc2l0aW9uLCBsZW5ndGhTaGlwLCBpbmRleE9iaiwgbGFzdFNoaXBQb3NpdGlvbiwgc2hpcE5hbWVBbmRTaXplKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY3JlYXRlU2hpcChzaGlwTmFtZUFuZFNpemUpOyAgXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdhbWVCb2FyZEZpZWxkcyhnYW1lRmllbGRzQXJyKTtcclxuXHJcbiAgICBpZihpc1Bvc2l0aW9uVHJ1ZShzaGlwTmFtZUFuZFNpemUpKXtcclxuICAgICAgICBzdGFydEdhbWUoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59LCBmYWxzZSk7XHJcblxyXG5jaGVja2VkRmllbGRzKCk7XHJcblxyXG5jb25zdCBzdGFydEdhbWUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBjb21wdXRlckdhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGNvbXB1dGVyR2FtZS5jbGFzc0xpc3QuYWRkKCdjb21wdXRlckdhbWVCb2FyZCcpO1xyXG5cclxuICAgIGNvbnN0IGdhbWVIVE1MID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdhbWVCb2FyZENvbXB1dGVyJyk7XHJcbiAgICBnYW1lSFRNTC5hcHBlbmRDaGlsZChjb21wdXRlckdhbWUpO1xyXG5cclxuICAgIGNvbXB1dGVyR2FtZUJvYXJkRmllbGQoY29wcHlDb21wdXRlckFycik7XHJcblxyXG4gICAgY29uc3QgZ2FtZWJvYXJkTWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb21wdXRlckdhbWVCb2FyZCcpO1xyXG4gICAgY29uc3QgdGVzdEdhbWVCb2FyZCA9IFsuLi5nYW1lYm9hcmRNYWluLmNoaWxkTm9kZXNdO1xyXG5cclxuICAgIHNoaXBTdGF0dXNQbGF5ZXIoc2hpcE5hbWVBbmRTaXplKTtcclxuICAgIHNoaXBTdGF0dXNDb21wdXRlcihzaGlwTmFtZUFuZFNpemVDb21wdXRlcik7XHJcblxyXG4gICAgdGVzdEdhbWVCb2FyZC5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4geyAgIFxyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJUZXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRhaW5lcicpO1xyXG5cclxuICAgICAgICAgICAgaWYoIWNvbnRhaW5lclRlc3QuY2xhc3NMaXN0LmNvbnRhaW5zKCd2aXNpYmxpdHknKSl7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXJUZXN0LmNsYXNzTGlzdC5hZGQoJ3Zpc2libGl0eScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ0NsaWNrZWQnKSB8fCBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2RlbGV0ZScpKXtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lclRlc3QuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsaXR5Jyk7XHJcbiAgICAgICAgICAgICAgICBjaGVja2VkRmllbGRzKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZpZWxkJykpe1xyXG4gICAgICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnZmllbGQnKTtcclxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ0NsaWNrZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdwbGF5cycpKXtcclxuICAgICAgICAgICAgICAgIGxldCBpc0xlbmdodFRvWmVybyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gTnVtYmVyKFN0cmluZyhlLnRhcmdldC5kYXRhc2V0LnJvdykgKyBTdHJpbmcoZS50YXJnZXQuZGF0YXNldC5jb2x1bW4pKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2hpcE5hbWVBbmRTaXplQ29tcHV0ZXIubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBzaGlwTmFtZUFuZFNpemVDb21wdXRlcltpXS5wb3NpdGlvbi5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNoaXBOYW1lQW5kU2l6ZUNvbXB1dGVyW2ldLnBvc2l0aW9uW2pdID09IGluZGV4KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoaXBOYW1lQW5kU2l6ZUNvbXB1dGVyW2ldLnBvc2l0aW9uLnNwbGljZShqLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdwbGF5cycpO1xyXG4gICAgICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnZGVsZXRlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBvID0gMDsgbyA8IHNoaXBOYW1lQW5kU2l6ZUNvbXB1dGVyLmxlbmd0aDsgbysrKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihzaGlwTmFtZUFuZFNpemVDb21wdXRlcltvXS5wb3NpdGlvbi5sZW5ndGggPT0gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTGVuZ2h0VG9aZXJvLnB1c2goJ3RydWUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoaXNMZW5naHRUb1plcm8ubGVuZ3RoID09IDUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbm5lclBhZ2UoJ3lvdSwgW3BsYXllcl0nKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29tcHV0ZXJSYW5kb21QbGF5cygpO1xyXG4gICAgICAgICAgICBnYW1lQm9hcmRGaWVsZHMoZ2FtZUZpZWxkc0Fycik7XHJcblxyXG4gICAgICAgICAgICBzaGlwU3RhdHVzUGxheWVyKHNoaXBOYW1lQW5kU2l6ZSk7XHJcbiAgICAgICAgICAgIHNoaXBTdGF0dXNDb21wdXRlcihzaGlwTmFtZUFuZFNpemVDb21wdXRlcik7XHJcbiAgICAgICAgfSlcclxuICAgIH0pXHJcbn1cclxuXHJcbmNvbnN0IGNvbXB1dGVyUmFuZG9tUGxheXMgPSAoKSA9PiB7XHJcbiAgICBmb3IobGV0IGYgPSAwOyBmIDwgMTAwMDsgZisrKXtcclxuICAgICAgICBjb25zdCByYW5kb21OdW1iZXIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA5OSk7XHJcbiAgICAgICAgbGV0IHJvdztcclxuICAgICAgICBsZXQgY29sdW1uO1xyXG5cclxuICAgICAgICBpZihjb21wdXRlclBsYXlzUmFuZG9tLmZpbmRJbmRleChpdGVtID0+IGl0ZW0gPT0gcmFuZG9tTnVtYmVyKSA+IC0xKXtcclxuICAgICAgICAgICAgbGV0IGluZGV4ID0gY29tcHV0ZXJQbGF5c1JhbmRvbS5maW5kSW5kZXgoaXRlbSA9PiBpdGVtID09IHJhbmRvbU51bWJlcik7XHJcbiAgICBcclxuICAgICAgICAgICAgaWYocmFuZG9tTnVtYmVyLnRvU3RyaW5nKCkuc3BsaXQoJycpLmxlbmd0aCA9PSAxKXtcclxuICAgICAgICAgICAgICAgIHJvdyA9IDA7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW4gPSBOdW1iZXIocmFuZG9tTnVtYmVyLnRvU3RyaW5nKCkuc3BsaXQoJycpWzBdKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICByb3cgPSBOdW1iZXIocmFuZG9tTnVtYmVyLnRvU3RyaW5nKCkuc3BsaXQoJycpWzBdKTtcclxuICAgICAgICAgICAgICAgIGNvbHVtbiA9IE51bWJlcihyYW5kb21OdW1iZXIudG9TdHJpbmcoKS5zcGxpdCgnJylbMV0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVtb3ZlZEl0ZW0gPSBjb21wdXRlclBsYXlzUmFuZG9tLnNwbGljZShpbmRleCwgMSk7XHJcblxyXG4gICAgICAgICAgICBnYW1lRmllbGRzQXJyW3Jvd11bY29sdW1uXSA9ICdDJztcclxuXHJcbiAgICAgICAgICAgIGlmKHJlbW92ZWRJdGVtKXtcclxuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaGlwTmFtZUFuZFNpemUubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBzaGlwTmFtZUFuZFNpemVbaV0ucG9zaXRpb24ubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzaGlwTmFtZUFuZFNpemVbaV0ucG9zaXRpb25bal0gPT0gcmVtb3ZlZEl0ZW0pe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzTGVuZ2h0VG9aZXJvID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGlwTmFtZUFuZFNpemVbaV0ucG9zaXRpb24uc3BsaWNlKGosIDEpO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IG8gPSAwOyBvIDwgc2hpcE5hbWVBbmRTaXplLmxlbmd0aDsgbysrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihzaGlwTmFtZUFuZFNpemVbb10ucG9zaXRpb24ubGVuZ3RoID09IDApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0xlbmdodFRvWmVyby5wdXNoKCd0cnVlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVGaWVsZHNBcnJbcm93XVtjb2x1bW5dID0gJ0QnO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlzTGVuZ2h0VG9aZXJvLmxlbmd0aCA9PSA1KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5uZXJQYWdlKCdjb21wdXRlcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBwb3NpdGlvbkxlbmd0aEFyciA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcihsZXQgYiA9IDA7IGIgPCBzaGlwTmFtZUFuZFNpemUubGVuZ3RoOyBiKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgYyA9IDA7IGMgPCBzaGlwTmFtZUFuZFNpemVbYl0ucG9zaXRpb24ubGVuZ3RoOyBjKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbkxlbmd0aEFyci5wdXNoKHNoaXBOYW1lQW5kU2l6ZVtiXS5wb3NpdGlvbltjXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgaWYoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdyZXNldCcpKXtcclxuICAgICAgICByZXNldCgpO1xyXG4gICAgfVxyXG59KVxyXG5cclxuY29uc3QgcmVzZXQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBmaXhlZFdpbm5lclBhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZml4ZWRXaW5uZXJQYWdlJyk7XHJcbiAgICAgICAgZml4ZWRXaW5uZXJQYWdlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZml4ZWRXaW5uZXJQYWdlKTtcclxuXHJcbiAgICAgICAgY29uc3QgZ2FtZUJvYXJkQ29tcHV0ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FtZUJvYXJkQ29tcHV0ZXInKTtcclxuICAgICAgICBnYW1lQm9hcmRDb21wdXRlci50ZXh0Q29udGVudCA9ICcnO1xyXG5cclxuICAgICAgICBjb25zdCBzaGlwc1N0YXR1c1R3byA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaGlwc1N0YXR1c1R3bycpO1xyXG4gICAgICAgIHNoaXBzU3RhdHVzVHdvLnRleHRDb250ZW50ID0gJyc7XHJcblxyXG4gICAgICAgIGNvbnN0IHNoaXBzU3RhdHVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNoaXBzU3RhdHVzJyk7XHJcbiAgICAgICAgc2hpcHNTdGF0dXMudGV4dENvbnRlbnQgPSAnJztcclxuXHJcbiAgICAgICAgY29tcHV0ZXJBcnIubGVuZ3RoID0gMDtcclxuICAgICAgICBnYW1lRmllbGRzQXJyLmxlbmd0aCA9IDA7XHJcblxyXG4gICAgICAgIGFkZENvdW50SW5UZW5BcnIoY29tcHV0ZXJBcnIpO1xyXG4gICAgICAgIGFkZENvdW50SW5UZW5BcnIoZ2FtZUZpZWxkc0Fycik7XHJcblxyXG4gICAgICAgIHBsYXllckluZGV4UGxheXMubGVuZ3RoID0gMDtcclxuICAgICAgICBjb21wdXRlclBsYXlzUmFuZG9tLmxlbmd0aCA9IDA7XHJcblxyXG4gICAgICAgIGNvcHB5Q29tcHV0ZXJBcnIubGVuZ3RoID0gMDtcclxuXHJcbiAgICAgICAgYWRkQ291bnRJblRlbkFycihjb3BweUNvbXB1dGVyQXJyKTtcclxuXHJcbiAgICAgICAgYWRkSHVuZHJlZE51bWJlcnMocGxheWVySW5kZXhQbGF5cyk7XHJcbiAgICAgICAgYWRkSHVuZHJlZE51bWJlcnMoY29tcHV0ZXJQbGF5c1JhbmRvbSk7XHJcblxyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaGlwTmFtZUFuZFNpemUubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICBzaGlwTmFtZUFuZFNpemVbaV0ucG9zaXRpb24ubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgc2hpcE5hbWVBbmRTaXplQ29tcHV0ZXJbaV0ucG9zaXRpb24ubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgc2hpcE5hbWVBbmRTaXplW2ldLmxhbmQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbXB1dGVyKCk7XHJcbiAgICAgICAgY29tcHV0ZXJBcnJUd28oKTtcclxuXHJcbiAgICAgICAgZ2FtZUJvYXJkRmllbGRzKGdhbWVGaWVsZHNBcnIpO1xyXG4gICAgICAgIGNyZWF0ZVNoaXAoc2hpcE5hbWVBbmRTaXplKTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coc2hpcE5hbWVBbmRTaXplKTtcclxufSIsImNvbnN0IGlzVHJ1ZSA9IChnYW1lRmllbGRzQXJyLCBmaXJzdFBvc2l0aW9uLCBsYXN0U2hpcFBvc2l0aW9uLCBzaGlwSXNHb29kU2l6ZSwgaW5kZXhPYmosIHNoaXBOYW1lQW5kU2l6ZSkgPT4ge1xyXG4gICAgZm9yKGxldCBuID0gMDsgbiA8IGdhbWVGaWVsZHNBcnIubGVuZ3RoOyBuKyspe1xyXG4gICAgICAgIGlmKGdhbWVGaWVsZHNBcnJbbl0uaW5jbHVkZXMoZmlyc3RQb3NpdGlvbikpe1xyXG4gICAgICAgICAgICBpZihnYW1lRmllbGRzQXJyW25dLmluY2x1ZGVzKGxhc3RTaGlwUG9zaXRpb24pKXtcclxuICAgICAgICAgICAgICAgIHNoaXBJc0dvb2RTaXplID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHNoaXBOYW1lQW5kU2l6ZVtpbmRleE9ial0ubGFuZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNoaXBJc0dvb2RTaXplO1xyXG4gICAgICAgICAgICB9OyBcclxuICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHNoaXBJc0dvb2RTaXplID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBpc1RydWU7IiwiY29uc3QgYWRkWUluQXJyID0gKGdhbWVGaWVsZHNBcnIsIGZpcnN0UG9zaXRpb24sIGxlbmd0aFNoaXAsIGluZGV4T2JqLCBsYXN0U2hpcFBvc2l0aW9uLCBzaGlwTmFtZUFuZFNpemUpID0+IHtcclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBnYW1lRmllbGRzQXJyLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgZ2FtZUZpZWxkc0FycltpXS5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgIGlmKGdhbWVGaWVsZHNBcnJbaV1bal0gPT0gZmlyc3RQb3NpdGlvbil7XHJcbiAgICAgICAgICAgICAgICBpZihnYW1lRmllbGRzQXJyW2ldW2pdID09IDApe1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgayA9IDA7IGsgPCBsZW5ndGhTaGlwOyBrKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGlwTmFtZUFuZFNpemVbaW5kZXhPYmpdLnBvc2l0aW9uLnB1c2goZ2FtZUZpZWxkc0FycltpXVtqICsga10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lRmllbGRzQXJyW2ldW2ogKyBrXSA9ICd4JztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FtZUZpZWxkc0FycltpICsgMV1bal0gPSAneSc7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBwID0gMDsgcCA8IGxlbmd0aFNoaXA7IHArKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVGaWVsZHNBcnJbaSArIDFdW2ogKyBwXSA9ICd5JztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FtZUZpZWxkc0FycltpXVtqICsgbGVuZ3RoU2hpcF0gPSAneSc7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZihnYW1lRmllbGRzQXJyW2ldW2pdID09IGdhbWVGaWVsZHNBcnJbMF1bal0pe1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgayA9IDA7IGsgPCBsZW5ndGhTaGlwOyBrKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGlwTmFtZUFuZFNpemVbaW5kZXhPYmpdLnBvc2l0aW9uLnB1c2goZ2FtZUZpZWxkc0FycltpXVtqICsga10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lRmllbGRzQXJyW2ldW2ogKyBrXSA9ICd4JztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FtZUZpZWxkc0FycltpICsgMV1bal0gPSAneSc7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBwID0gMDsgcCA8IGxlbmd0aFNoaXA7IHArKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVGaWVsZHNBcnJbaSArIDFdW2ogKyBwXSA9ICd5JztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FtZUZpZWxkc0FycltpXVtmaXJzdFBvc2l0aW9uIC0gMV0gPSAneSc7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FtZUZpZWxkc0FycltpXVtsYXN0U2hpcFBvc2l0aW9uICsgMV0gPSAneSc7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZihnYW1lRmllbGRzQXJyW2ldW2pdID09IGdhbWVGaWVsZHNBcnJbOV1bal0gJiYgaiAhPSAwKXtcclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGsgPSAwOyBrIDwgbGVuZ3RoU2hpcDsgaysrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hpcE5hbWVBbmRTaXplW2luZGV4T2JqXS5wb3NpdGlvbi5wdXNoKGdhbWVGaWVsZHNBcnJbaV1baiArIGtdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZUZpZWxkc0FycltpXVtqICsga10gPSAneCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgcCA9IDA7IHAgPCBsZW5ndGhTaGlwOyBwKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lRmllbGRzQXJyW2kgLSAxXVtqICsgcF0gPSAneSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVGaWVsZHNBcnJbaV1bbGVuZ3RoU2hpcCArIGpdID0gJ3knO1xyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVGaWVsZHNBcnJbaV1baiAtIDFdID0gJ3knO1xyXG4gICAgICAgICAgICAgICAgfWVsc2UgaWYoZ2FtZUZpZWxkc0FycltpXVtqXSA9PSBnYW1lRmllbGRzQXJyWzldW2pdKXtcclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGsgPSAwOyBrIDwgbGVuZ3RoU2hpcDsgaysrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hpcE5hbWVBbmRTaXplW2luZGV4T2JqXS5wb3NpdGlvbi5wdXNoKGdhbWVGaWVsZHNBcnJbaV1baiArIGtdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZUZpZWxkc0FycltpXVtqICsga10gPSAneCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgcCA9IDA7IHAgPCBsZW5ndGhTaGlwOyBwKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lRmllbGRzQXJyW2kgLSAxXVtqICsgcF0gPSAneSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVGaWVsZHNBcnJbaV1bbGVuZ3RoU2hpcF0gPSAneSc7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGsgPSAwOyBrIDwgbGVuZ3RoU2hpcDsgaysrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hpcE5hbWVBbmRTaXplW2luZGV4T2JqXS5wb3NpdGlvbi5wdXNoKGdhbWVGaWVsZHNBcnJbaV1baiArIGtdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZUZpZWxkc0FycltpXVtqICsga10gPSAneCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVGaWVsZHNBcnJbaSArIDFdW2pdID0gJ3knO1xyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVGaWVsZHNBcnJbaSAtIDFdW2pdID0gJ3knO1xyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVGaWVsZHNBcnJbaV1baiAtIDFdID0gJ3knO1xyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVGaWVsZHNBcnJbaV1baiArIGxlbmd0aFNoaXBdID0gJ3knO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgcCA9IDA7IHAgPCBsZW5ndGhTaGlwOyBwKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lRmllbGRzQXJyW2kgKyAxXVtqICsgcF0gPSAneSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVGaWVsZHNBcnJbaSAtIDFdW2ogKyBwXSA9ICd5JztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFkZFlJbkFycjsiLCJjb25zdCBjb21wdXRlckdhbWVCb2FyZEZpZWxkID0gKGNvbXB1dGVyQXJyKSA9PiB7XHJcbiAgICBcclxuICAgIGNvbnN0IGNvbXB1dGVyR2FtZWJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbXB1dGVyR2FtZUJvYXJkJyk7XHJcbiAgICBjb21wdXRlckdhbWVib2FyZC50ZXh0Q29udGVudCA9ICcnO1xyXG5cclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKXtcclxuICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgMTA7IGorKyl7XHJcbiAgICAgICAgICAgIGlmKGNvbXB1dGVyQXJyW2ldW2pdID09ICdYJyl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBnYW1lRmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIGdhbWVGaWVsZC5jbGFzc0xpc3QuYWRkKCdwbGF5cycpO1xyXG4gICAgICAgICAgICAgICAgZ2FtZUZpZWxkLmRhdGFzZXQucm93ID0gaTtcclxuICAgICAgICAgICAgICAgIGdhbWVGaWVsZC5kYXRhc2V0LmNvbHVtbiA9IGo7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLmFwcGVuZENoaWxkKGdhbWVGaWVsZCk7XHJcbiAgICAgICAgICAgIH1lbHNlIGlmKGNvbXB1dGVyQXJyW2ldW2pdID09ICdDJyl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBnYW1lRmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIGdhbWVGaWVsZC5jbGFzc0xpc3QuYWRkKCdDbGlja2VkJyk7XHJcbiAgICAgICAgICAgICAgICBnYW1lRmllbGQuZGF0YXNldC5yb3cgPSBpO1xyXG4gICAgICAgICAgICAgICAgZ2FtZUZpZWxkLmRhdGFzZXQuY29sdW1uID0gajtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY29tcHV0ZXJHYW1lYm9hcmQuYXBwZW5kQ2hpbGQoZ2FtZUZpZWxkKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBnYW1lRmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIGdhbWVGaWVsZC5jbGFzc0xpc3QuYWRkKCdmaWVsZCcpO1xyXG4gICAgICAgICAgICAgICAgZ2FtZUZpZWxkLmRhdGFzZXQucm93ID0gaTtcclxuICAgICAgICAgICAgICAgIGdhbWVGaWVsZC5kYXRhc2V0LmNvbHVtbiA9IGo7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLmFwcGVuZENoaWxkKGdhbWVGaWVsZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbXB1dGVyR2FtZUJvYXJkRmllbGQ7Il0sIm5hbWVzIjpbImdhbWVGaWVsZHNBcnIiLCJnYW1lQm9hcmRDbGFzcyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInRleHRDb250ZW50IiwiaSIsImoiLCJnYW1lRmllbGQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiZGF0YXNldCIsInJvdyIsImNvbHVtbiIsImFwcGVuZENoaWxkIiwic2hpcE5hbWVBbmRTaXplIiwic2hpcHNDbGFzcyIsImxlbmd0aCIsImxhbmQiLCJzaGlwIiwiaWQiLCJuYW1lIiwic3R5bGUiLCJncmlkVGVtcGxhdGVDb2x1bW5zIiwic2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiYmFja2dyb3VuZENvbG9yIiwiZHJhZ2dhYmxlIiwic3F1YXJlIiwiYXJyIiwiY291bnQiLCJuZXdBcnIiLCJwdXNoIiwibm90WSIsIml0ZW0iLCJmaW5kSW5kZXhDb21wdXRlciIsImNvbXB1dGVyQXJyIiwic2hpcE5hbWVBbmRTaXplQ29tcHV0ZXIiLCJxIiwiZSIsInBvc2l0aW9uIiwiZXZlcnkiLCJjIiwib2JqIiwic2hpcHNTdGF0dXMiLCJzaGlwU3RhdCIsInNoaXBOYW1lIiwic2hpcFNpemUiLCJzaGlwc1N0YXR1c1R3byIsImNvbnRhaW5lciIsImNoZWNrZWRGaWVsZCIsImJvZHkiLCJ3aW5uZXIiLCJnYW1lIiwiZml4ZWRXaW5uZXJQYWdlIiwiZGl2IiwiaDEiLCJidXR0b24iLCJjb21wdXRlclBsYXlzUmFuZG9tIiwicGxheWVySW5kZXhQbGF5cyIsImNvcHB5Q29tcHV0ZXJBcnIiLCJhZGRIdW5kcmVkTnVtYmVycyIsInRydWVPckZhbHNlIiwiY29tcHV0ZXIiLCJjb3VudEFyciIsImIiLCJ4IiwibyIsImZpbHRlciIsInZhbHVlIiwibnVtIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwidG9TdHJpbmciLCJOdW1iZXIiLCJzcGxpdCIsImZpbmRJbmRleCIsImNvbXB1dGVyQXJyVHdvIiwiaCIsImRyYWdnZWQiLCJhZGRFdmVudExpc3RlbmVyIiwidGFyZ2V0Iiwib3BhY2l0eSIsImZpcnN0Q2hpbGQiLCJwcmV2ZW50RGVmYXVsdCIsImNsYXNzTmFtZSIsImJhY2tncm91bmQiLCJyZXN1bHRQb3NpdGlvbiIsInN0cmluZ1RvSW50IiwibmFtZVNoaXAiLCJsZW5ndGhTaGlwIiwiaW5kZXhPYmoiLCJmaXJzdFBvc2l0aW9uIiwibGFzdFNoaXBQb3NpdGlvbiIsInNoaXBBcnJQb3NpdGlvbiIsInNoaXBJc0dvb2RTaXplIiwibiIsImluY2x1ZGVzIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiayIsInAiLCJpc1Bvc2l0aW9uVHJ1ZSIsInN0YXJ0R2FtZSIsImNvbXB1dGVyR2FtZSIsImNvbXB1dGVyR2FtZWJvYXJkIiwidGVzdEdhbWVCb2FyZCIsImNoaWxkTm9kZXMiLCJmb3JFYWNoIiwiY29udGFpbmVyVGVzdCIsImNvbnRhaW5zIiwicmVtb3ZlIiwiaXNMZW5naHRUb1plcm8iLCJpbmRleCIsIlN0cmluZyIsInNwbGljZSIsImNvbXB1dGVyUmFuZG9tUGxheXMiLCJmIiwicmFuZG9tTnVtYmVyIiwicmVtb3ZlZEl0ZW0iLCJwb3NpdGlvbkxlbmd0aEFyciIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9