(()=>{"use strict";let e;(()=>{const e=document.querySelector(".gameboard");for(let t=0;t<10;t++)for(let a=0;a<10;a++)if(0==t&&0==a){const d=document.createElement("div");d.classList.add("gameField"),d.dataset.row=t,d.dataset.column=a;const n=document.createElement("div");n.id="draggable",n.draggable=!0,n.dataset.row=t,n.dataset.column=a,d.appendChild(n),e.appendChild(d)}else{const d=document.createElement("div");d.classList.add("gameField"),d.dataset.row=t,d.dataset.column=a,e.appendChild(d)}})(),(()=>{const e=[{name:"Destroyer",size:2},{name:"Submarine",size:3},{name:"Cruiser",size:3},{name:"Battleship",size:4},{name:"Carrier",size:5}],t=document.querySelector(".ships");for(let a=0;a<e.length;a++){const d=document.createElement("div");d.classList.add("ship"),d.classList.add(e[a].name),d.style.gridTemplateColumns=`repeat(${e[a].size}, 1fr)`;for(let t=0;t<e[a].size;t++){const e=document.createElement("div");e.classList.add("square"),d.appendChild(e)}t.appendChild(d)}})(),document.addEventListener("click",(e=>{e.target.classList.contains("gameField")&&console.log(e.target.dataset.row,e.target.dataset.column)})),document.addEventListener("dragstart",(function(t){e=t.target,t.target.style.opacity=.3}),!1),document.addEventListener("dragend",(function(e){e.target.style.opacity="",e.target.dataset.row=e.target.parentNode.dataset.row,e.target.dataset.column=e.target.parentNode.dataset.column,console.log(e.target.dataset.row,e.target.dataset.column)}),!1),document.addEventListener("dragover",(function(e){e.preventDefault()}),!1),document.addEventListener("dragenter",(function(e){"gameField"==e.target.className&&(e.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(function(e){"gameField"==e.target.className&&(e.target.style.background="")}),!1),document.addEventListener("drop",(function(t){t.preventDefault(),"gameField"==t.target.className&&(t.target.style.background="",e.parentNode.removeChild(e),t.target.appendChild(e))}),!1)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,