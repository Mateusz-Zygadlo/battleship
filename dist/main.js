(()=>{"use strict";const e=e=>{const t=document.querySelector(".gameboard");t.textContent="";for(let o=0;o<10;o++)for(let l=0;l<10;l++)if("x"==e[o][l]){const e=document.createElement("div");e.classList.add("checked"),e.dataset.row=o,e.dataset.column=l,t.appendChild(e)}else if("y"==e[o][l]){const e=document.createElement("div");e.classList.add("blocked"),e.dataset.row=o,e.dataset.column=l,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("gameField"),e.dataset.row=o,e.dataset.column=l,t.appendChild(e)}},t=e=>{const t=document.querySelector(".ships");t.textContent="";for(let o=0;o<e.length;o++)if(1==e[o].land);else{const l=document.createElement("div");l.classList.add("ship"),l.dataset.id=e[o].id,l.classList.add(e[o].name),l.style.gridTemplateColumns=`repeat(${e[o].size}, 1fr)`,l.style.width=`calc(${e[o].id} * 50px)`,l.style.height="50px",l.style.backgroundColor="black",l.draggable=!0;for(let t=0;t<e[o].size;t++){const e=document.createElement("div");e.classList.add("square"),l.appendChild(e)}t.appendChild(l)}},o=e=>{const t=document.querySelector(".computerGameBoard");t.textContent="";for(let o=0;o<10;o++)for(let l=0;l<10;l++)if("X"==e[o][l]){const e=document.createElement("div");e.classList.add("plays"),e.dataset.row=o,e.dataset.column=l,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("field"),e.dataset.row=o,e.dataset.column=l,t.appendChild(e)}},l=()=>({rowChoice:Math.floor(9*Math.random()),columnChoice:Math.floor(99*Math.random())}),n=[];let s=0;for(let e=0;e<10;e++){const e=[];for(let t=0;t<10;t++)e.push(s),s++;n.push(e)}const a=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}],i=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}],r=e=>"X"!==e;let d,c=[];for(let e=0;e<10;e++){const e=[];for(let t=0;t<10;t++)e.push(s),s++;c.push(e)}(()=>{l().rowChoice,l().columnChoice,c.length=0;let e=0;for(let t=0;t<10;t++){const t=[];for(let o=0;o<10;o++)t.push(e),e++;c.push(t)}let t=0;o(c);for(let o=0;o<1e3;o++){for(let e=0;e<i.length;e++)i[e].position.every(r)||(i[e].position.length=0);if(i[0].position.length&&i[1].position.length&&i[2].position.length&&i[3].position.length&&i[4].position.length){for(let e=0;e<10;e++)c[e].filter((e=>"X"==e))&&(t+=c[e].filter((e=>"X"==e)).length);if(console.log(t),17!=t){c.length=0;for(let t=0;t<10;t++){const t=[];for(let o=0;o<10;o++)t.push(e),e++;c.push(t)}for(let e=0;e<5;e++)i[e].position.length=0;break}return{computerArr:c,shipNameAndSizeComputer:i}}for(let e=0;e<i.length;e++)if(i[e].position.length>1);else{const t=(n=e,Math.floor(94*Math.random())+i[n].size);let o,l;1==t.toString().length?(o=0,l=Number(t.toString().split("")[0])):(o=Number(t.toString().split("")[0]),l=Number(t.toString().split("")[1]));const s=c[o].findIndex((e=>e==t));if(s>0&&s-i[e].size>=0)for(let t=0;t<i[e].size;t++)i[e].position.push(c[o][s-t]),c[o][s-t]="X"}}var n})(),o(c),e(n),t(a),document.addEventListener("dragstart",(e=>{d=e.target,e.target.style.opacity=.3}),!1),document.addEventListener("dragend",(e=>{e.target.style.opacity="",e.target.dataset.row=e.target.firstChild.dataset.row,e.target.dataset.column=e.target.firstChild.dataset.column}),!1),document.addEventListener("dragover",(e=>{e.preventDefault()}),!1),document.addEventListener("dragenter",(e=>{"gameField"==e.target.className&&(e.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(e=>{"gameField"==e.target.className&&(e.target.style.background="")}),!1),document.addEventListener("drop",(o=>{if(o.preventDefault(),"gameField"==o.target.className){o.target.style.background="",o.target.appendChild(d);let l=!1,s=o.target.dataset.row+o.target.dataset.column,i=Number(s);for(let e=0;e<s.split("").length;e++)0==s.split("")[0]&&(s=s.split("")[1]);const r=o.target.firstChild.className.split(" ")[1];let c,p;for(let e=0;e<a.length;e++)a[e].name==r&&(c=a[e].size,p=e);const g=i,m=i+c-1,u=[];for(let e=g;e<=m;e++)u.push(e);const h=(e,t,o,l)=>{for(let l=0;l<e.length;l++)if(e[l].includes(t))return!!e[l].includes(o)&&(!0,a[p].land=!0,true)};if(t(a),h(n,g,m,l)){o.target.style.background="",d.parentNode.removeChild(d),o.target.appendChild(d);for(let e=0;e<n.length;e++)for(let t=0;t<n[e].length;t++)if(n[e][t]==g)if(0==n[e][t]){for(let o=0;o<c;o++)a[p].position.push(n[e][t+o]),n[e][t+o]="x";n[e+1][t]="y";for(let o=0;o<c;o++)n[e+1][t+o]="y";n[e][t+c]="y",console.log(e)}else if(n[e][t]==n[0][t]){for(let o=0;o<c;o++)a[p].position.push(n[e][t+o]),n[e][t+o]="x";n[e+1][t]="y";for(let o=0;o<c;o++)n[e+1][t+o]="y";n[e][g-1]="y",n[e][m+1]="y"}else if(n[e][t]==n[9][t]&&0!=t){for(let o=0;o<c;o++)a[p].position.push(n[e][t+o]),n[e][t+o]="x";for(let o=0;o<c;o++)n[e-1][t+o]="y";console.log(!0,!1),n[e][c+t]="y",n[e][t-1]="y"}else if(n[e][t]==n[9][t]){for(let o=0;o<c;o++)a[p].position.push(n[e][t+o]),n[e][t+o]="x";for(let o=0;o<c;o++)n[e-1][t+o]="y";console.log(!0,!1),n[e][c]="y"}else{for(let o=0;o<c;o++)a[p].position.push(n[e][t+o]),n[e][t+o]="x";n[e+1][t]="y",n[e-1][t]="y",n[e][t-1]="y",n[e][t+c]="y";for(let o=0;o<c;o++)n[e+1][t+o]="y",n[e-1][t+o]="y"}d.parentNode.removeChild(d)}else d.parentNode.removeChild(d),o.target.style.background="",t(a),a[p].land=!1,e(n);t(a)}(e=>{let t=0;for(let o=0;o<e.length;o++)e[o].position.length&&t++;return 5==t})(a)&&console.log("start game"),e(n),console.log(n),console.log(a)}),!1)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,