(()=>{"use strict";const e=e=>{const t=document.querySelector(".gameboard");t.textContent="";for(let a=0;a<10;a++)for(let l=0;l<10;l++)if("x"==e[a][l]){const e=document.createElement("div");e.classList.add("checked"),e.dataset.row=a,e.dataset.column=l,t.appendChild(e)}else if("y"==e[a][l]){const e=document.createElement("div");e.classList.add("blocked"),e.dataset.row=a,e.dataset.column=l,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("gameField"),e.dataset.row=a,e.dataset.column=l,t.appendChild(e)}},t=e=>{const t=document.querySelector(".ships");t.textContent="";for(let a=0;a<e.length;a++)if(1==e[a].land);else{const l=document.createElement("div");l.classList.add("ship"),l.dataset.id=e[a].id,l.classList.add(e[a].name),l.style.gridTemplateColumns=`repeat(${e[a].size}, 1fr)`,l.style.width=`calc(${e[a].id} * 50px)`,l.style.height="50px",l.style.backgroundColor="black",l.draggable=!0;for(let t=0;t<e[a].size;t++){const e=document.createElement("div");e.classList.add("square"),l.appendChild(e)}t.appendChild(l)}},a=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}];let l;const s=[];let o=0;for(let e=0;e<10;e++){const e=[];for(let t=0;t<10;t++)e.push(o),o++;s.push(e)}e(s),t(a),document.addEventListener("dragstart",(e=>{l=e.target,e.target.style.opacity=.3}),!1),document.addEventListener("dragend",(e=>{e.target.style.opacity="",e.target.dataset.row=e.target.firstChild.dataset.row,e.target.dataset.column=e.target.firstChild.dataset.column}),!1),document.addEventListener("dragover",(e=>{e.preventDefault()}),!1),document.addEventListener("dragenter",(e=>{"gameField"==e.target.className&&(e.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(e=>{"gameField"==e.target.className&&(e.target.style.background="")}),!1),document.addEventListener("drop",(o=>{if(o.preventDefault(),"gameField"==o.target.className){o.target.style.background="",o.target.appendChild(l);let n=!1,d=o.target.dataset.row+o.target.dataset.column,r=Number(d);for(let e=0;e<d.split("").length;e++)0==d.split("")[0]&&(d=d.split("")[1]);const i=o.target.firstChild.className.split(" ")[1];let c,g;for(let e=0;e<a.length;e++)a[e].name==i&&(c=a[e].size,g=e);const p=r,m=r+c-1,u=[];for(let e=p;e<=m;e++)u.push(e);const f=(e,t,l,s)=>{for(let s=0;s<e.length;s++)if(e[s].includes(t))return!!e[s].includes(l)&&(!0,a[g].land=!0,true)};if(t(a),f(s,p,m,n)){o.target.style.background="",l.parentNode.removeChild(l),o.target.appendChild(l);for(let e=0;e<s.length;e++)for(let t=0;t<s[e].length;t++)if(s[e][t]==p)if(0==s[e][t]){for(let l=0;l<c;l++)a[g].position.push(s[e][t+l]),s[e][t+l]="x";s[e+1][t]="y";for(let a=0;a<c;a++)s[e+1][t+a]="y";s[e][t+c]="y",console.log(e)}else if(s[e][t]==s[0][t]){for(let l=0;l<c;l++)a[g].position.push(s[e][t+l]),s[e][t+l]="x";s[e+1][t]="y";for(let a=0;a<c;a++)s[e+1][t+a]="y";s[e][p-1]="y",s[e][m+1]="y"}else if(s[e][t]==s[9][t]&&0!=t){for(let l=0;l<c;l++)a[g].position.push(s[e][t+l]),s[e][t+l]="x";for(let a=0;a<c;a++)s[e-1][t+a]="y";console.log(!0,!1),s[e][c+t]="y",s[e][t-1]="y"}else if(s[e][t]==s[9][t]){for(let l=0;l<c;l++)a[g].position.push(s[e][t+l]),s[e][t+l]="x";for(let a=0;a<c;a++)s[e-1][t+a]="y";console.log(!0,!1),s[e][c]="y"}else{for(let l=0;l<c;l++)a[g].position.push(s[e][t+l]),s[e][t+l]="x";s[e+1][t]="y",s[e-1][t]="y",s[e][t-1]="y",s[e][t+c]="y";for(let a=0;a<c;a++)s[e+1][t+a]="y",s[e-1][t+a]="y";console.log(e,t)}l.parentNode.removeChild(l)}else l.parentNode.removeChild(l),o.target.style.background="",t(a),a[g].land=!1,e(s);t(a)}(e=>{let t=0;for(let a=0;a<e.length;a++)e[a].position.length&&t++;return 5==t})(a)&&console.log("start game"),e(s),console.log(s),console.log(a)}),!1)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,