(()=>{var e={672:e=>{e.exports=e=>"X"!==e}},t={};function n(s){var o=t[s];if(void 0!==o)return o.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";const e=e=>{const t=document.querySelector(".gameboard");t.textContent="";for(let n=0;n<10;n++)for(let s=0;s<10;s++)if("x"==e[n][s]){const e=document.createElement("div");e.classList.add("checked"),e.dataset.row=n,e.dataset.column=s,t.appendChild(e)}else if("y"==e[n][s]){const e=document.createElement("div");e.classList.add("blocked"),e.dataset.row=n,e.dataset.column=s,t.appendChild(e)}else if("C"==e[n][s]){const e=document.createElement("div");e.classList.add("Clicked"),e.dataset.row=n,e.dataset.column=s,t.appendChild(e)}else if("D"==e[n][s]){const e=document.createElement("div");e.classList.add("delete"),e.dataset.row=n,e.dataset.column=s,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("gameField"),e.dataset.row=n,e.dataset.column=s,t.appendChild(e)}},t=e=>{const t=document.querySelector(".ships");t.textContent="";for(let n=0;n<e.length;n++)if(1==e[n].land);else{const s=document.createElement("div");s.classList.add("ship"),s.dataset.id=e[n].id,s.classList.add(e[n].name),s.style.gridTemplateColumns=`repeat(${e[n].size}, 1fr)`,s.style.width=`calc(${e[n].id} * 50px)`,s.style.height="50px",s.style.backgroundColor="black",s.draggable=!0;for(let t=0;t<e[n].size;t++){const e=document.createElement("div");e.classList.add("square"),s.appendChild(e)}t.appendChild(s)}},s=e=>{let t=0;for(let n=0;n<10;n++){const n=[];for(let e=0;e<10;e++)n.push(t),t++;e.push(n)}},o=e=>"Y"!=e,i=(e,t,n,i,l)=>{if(0==e&&0==t){n[e+1][t+1]="Y";for(let s=0;s<i[l].size;s++)n[e+1][t-s]="Y"}else if(9==e&&t>0){n[e][t-i[l].size]="Y";for(let s=0;s<i[l].size;s++)n[e-1][t-s]="Y"}else if(9==e&&0==t)n[e][t+1]="Y",n[e][t-i[l].size]="Y";else if(0==e&&t>0){n[e][t+1]="Y",n[e][t-i[l].size]="Y";for(let s=0;s<i[l].size;s++)n[e+1][t-s]="Y"}else{n[e][t+1]="Y",n[e][t-i[l].size]="Y";for(let s=0;s<i[l].size;s++)n[e+1][t-s]="Y",n[e-1][t-s]="Y"}for(let e=0;e<i.length;e++)if(!i[e].position.every(o)){for(let e=0;e<i.length;e++)i[e].position.length=0;n.length=0,s(n);break}},l=e=>{const t=document.querySelector(".shipsStatus");t.textContent="";for(let n=0;n<e.length;n++)if(e[n].name){const s=document.createElement("div");s.classList.add("ship");const o=document.createElement("div");o.classList.add("shipName"),o.textContent=e[n].name,s.appendChild(o);const i=document.createElement("div");i.classList.add("shipSize"),i.textContent=e[n].position.length,s.appendChild(i),t.appendChild(s)}},a=e=>{const t=document.querySelector(".shipsStatusTwo");t.textContent="";for(let n=0;n<e.length;n++)if(e[n].name){const s=document.createElement("div");s.classList.add("ship");const o=document.createElement("div");o.classList.add("shipName"),o.textContent=e[n].name,s.appendChild(o);const i=document.createElement("div");i.classList.add("shipSize"),i.textContent=e[n].position.length,s.appendChild(i),t.appendChild(s)}},d=()=>{const e=document.createElement("div");e.classList.add("container"),e.classList.add("visiblity");const t=document.createElement("div");t.classList.add("checkedField"),t.textContent="You cannot click on the field again",e.appendChild(t),document.body.appendChild(e)},r=e=>{const t=document.querySelector(".game"),n=document.createElement("div");n.classList.add("fixedWinnerPage");const s=document.createElement("div");s.classList.add("content");const o=document.createElement("h1");o.textContent=`The winner is [${e}]`;const i=document.createElement("button");i.textContent="reset",i.classList.add("reset"),s.appendChild(o),s.appendChild(i),n.appendChild(s),t.appendChild(n)};var c=n(672),p=n.n(c);const m=[];let u=[],h=[],g=[];const f=[],y=e=>{for(let t=0;t<100;t++)e.push(t)};s(m),s(g),s(f),y(h),y(u);const C=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}],v=[{name:"Destroyer",size:2,position:[]},{name:"Submarine",size:3,position:[]},{name:"Cruiser",size:3,position:[]},{name:"Battleship",size:4,position:[]},{name:"Carrier",size:5,position:[]}],L=()=>{let e=0;g.length=0,s(g);for(let n=0;n<1e3;n++){for(let e=0;e<v.length;e++)v[e].position.every(p())||(v[e].position.length=0);if(v[0].position.length&&v[1].position.length&&v[2].position.length&&v[3].position.length&&v[4].position.length){for(let t=0;t<10;t++)g[t].filter((e=>"X"==e))&&(e+=g[t].filter((e=>"X"==e)).length);return{computerArr:g,shipNameAndSizeComputer:v}}for(let e=0;e<v.length;e++)if(v[e].position.length>1);else{const n=(t=e,Math.floor(94*Math.random())+v[t].size);let s;s=1==n.toString().length?0:Number(n.toString().split("")[0]);const o=g[s].findIndex((e=>e==n));if(o>0&&o-v[e].size>=0){for(let t=0;t<v[e].size;t++)v[e].position.push(g[s][o-t]),g[s][o-t]="X";i(s,o,g,v,e)}}}var t};L();const S=()=>{for(let e=0;e<1e3;e++)for(let e=0;e<v.length;e++)for(let t=0;t<v[e].position.length;t++){let n,s;1==v[e].position[t].toString().split("").length?(n=0,s=v[e].position[t].toString().split("")[0]):(n=v[e].position[t].toString().split("")[0],s=v[e].position[t].toString().split("")[1]),f[n][s]="X"}};let x;S(),e(m),t(C),document.addEventListener("dragstart",(e=>{x=e.target,e.target.style.opacity=.3}),!1),document.addEventListener("dragend",(e=>{e.target.style.opacity="",e.target.dataset.row=e.target.firstChild.dataset.row,e.target.dataset.column=e.target.firstChild.dataset.column}),!1),document.addEventListener("dragover",(e=>{e.preventDefault()}),!1),document.addEventListener("dragenter",(e=>{"gameField"==e.target.className&&(e.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(e=>{"gameField"==e.target.className&&(e.target.style.background="")}),!1),document.addEventListener("drop",(n=>{if(n.preventDefault(),"gameField"==n.target.className){n.target.style.background="",n.target.appendChild(x);let s=n.target.dataset.row+n.target.dataset.column,o=Number(s);for(let e=0;e<s.split("").length;e++)0==s.split("")[0]&&(s=s.split("")[1]);const i=n.target.firstChild.className.split(" ")[1];let l,a;for(let e=0;e<C.length;e++)C[e].name==i&&(l=C[e].size,a=e);const d=o,r=o+l-1,c=[];for(let e=d;e<=r;e++)c.push(e);t(C),((e,t,n,s,o,i)=>{for(let s=0;s<e.length;s++)if(e[s].includes(t))return!!e[s].includes(n)&&(i[o].land=!0,!0)})(m,d,r,0,a,C)?(n.target.style.background="",n.target.appendChild(x),x.parentNode.removeChild(x),((e,t,n,s,o,i)=>{for(let l=0;l<e.length;l++)for(let a=0;a<e[l].length;a++)if(e[l][a]==t)if(0==e[l][a]){for(let t=0;t<n;t++)i[s].position.push(e[l][a+t]),e[l][a+t]="x";e[l+1][a]="y";for(let t=0;t<n;t++)e[l+1][a+t]="y";e[l][a+n]="y"}else if(e[l][a]==e[0][a]){for(let t=0;t<n;t++)i[s].position.push(e[l][a+t]),e[l][a+t]="x";e[l+1][a]="y";for(let t=0;t<n;t++)e[l+1][a+t]="y";e[l][t-1]="y",e[l][o+1]="y"}else if(e[l][a]==e[9][a]&&0!=a){for(let t=0;t<n;t++)i[s].position.push(e[l][a+t]),e[l][a+t]="x";for(let t=0;t<n;t++)e[l-1][a+t]="y";e[l][n+a]="y",e[l][a-1]="y"}else if(e[l][a]==e[9][a]){for(let t=0;t<n;t++)i[s].position.push(e[l][a+t]),e[l][a+t]="x";for(let t=0;t<n;t++)e[l-1][a+t]="y";e[l][n]="y"}else{for(let t=0;t<n;t++)i[s].position.push(e[l][a+t]),e[l][a+t]="x";e[l+1][a]="y",e[l-1][a]="y",e[l][a-1]="y",e[l][a+n]="y";for(let t=0;t<n;t++)e[l+1][a+t]="y",e[l-1][a+t]="y"}})(m,d,l,a,r,C)):(n.target.style.background="",x.parentNode.removeChild(x),C[a].land=!1,t(C),e(m)),t(C)}e(m),(e=>{let t=0;for(let n=0;n<e.length;n++)e[n].position.length&&t++;return 5==t})(C)&&E()}),!1),d();const E=()=>{const t=document.createElement("div");t.classList.add("computerGameBoard"),document.querySelector(".gameBoardComputer").appendChild(t),(e=>{const t=document.querySelector(".computerGameBoard");t.textContent="";for(let n=0;n<10;n++)for(let s=0;s<10;s++)if("X"==e[n][s]){const e=document.createElement("div");e.classList.add("plays"),e.dataset.row=n,e.dataset.column=s,t.appendChild(e)}else if("C"==e[n][s]){const e=document.createElement("div");e.classList.add("Clicked"),e.dataset.row=n,e.dataset.column=s,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("field"),e.dataset.row=n,e.dataset.column=s,t.appendChild(e)}})(f);const n=[...document.querySelector(".computerGameBoard").childNodes];l(C),a(v),n.forEach((t=>{t.addEventListener("click",(t=>{const n=document.querySelector(".container");if(n.classList.contains("visiblity")||n.classList.add("visiblity"),t.target.classList.contains("Clicked")||t.target.classList.contains("delete"))return n.classList.remove("visiblity"),void d();if(t.target.classList.contains("field")&&(t.target.classList.remove("field"),t.target.classList.add("Clicked")),t.target.classList.contains("plays")){let e=[];const n=Number(String(t.target.dataset.row)+String(t.target.dataset.column));for(let e=0;e<v.length;e++)for(let t=0;t<v[e].position.length;t++)v[e].position[t]==n&&v[e].position.splice(t,1);t.target.classList.remove("plays"),t.target.classList.add("delete");for(let t=0;t<v.length;t++)0==v[t].position.length&&e.push("true");if(5==e.length)return void r("you, [player]")}b(),e(m),l(C),a(v)}))}))},b=()=>{for(let e=0;e<1e3;e++){const e=Math.floor(99*Math.random());let t,n;if(u.findIndex((t=>t==e))>-1){let s=u.findIndex((t=>t==e));1==e.toString().split("").length?(t=0,n=Number(e.toString().split("")[0])):(t=Number(e.toString().split("")[0]),n=Number(e.toString().split("")[1]));let o=u.splice(s,1);if(m[t][n]="C",o){for(let e=0;e<C.length;e++)for(let s=0;s<C[e].position.length;s++)if(C[e].position[s]==o){let o=[];C[e].position.splice(s,1);for(let e=0;e<C.length;e++)0==C[e].position.length&&o.push("true");return m[t][n]="D",5==o.length?void r("computer"):void 0}let e=[];for(let t=0;t<C.length;t++)for(let n=0;n<C[t].position.length;n++)e.push(C[t].position[n]);return}}}};document.addEventListener("click",(e=>{e.target.classList.contains("reset")&&z()}));const z=()=>{const n=document.querySelector(".fixedWinnerPage");n.parentNode.removeChild(n),document.querySelector(".gameBoardComputer").textContent="",document.querySelector(".shipsStatusTwo").textContent="",document.querySelector(".shipsStatus").textContent="",g.length=0,m.length=0,s(g),s(m),h.length=0,u.length=0,f.length=0,s(f),y(h),y(u);for(let e=0;e<C.length;e++)C[e].position.length=0,v[e].position.length=0,C[e].land=!1;L(),S(),e(m),t(C)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,