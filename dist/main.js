(()=>{"use strict";const t=t=>{const e=document.querySelector(".gameboard");e.textContent="";for(let o=0;o<10;o++)for(let i=0;i<10;i++)if("x"==t[o][i]){const t=document.createElement("div");t.classList.add("checked"),t.dataset.row=o,t.dataset.column=i,e.appendChild(t)}else if("y"==t[o][i]){const t=document.createElement("div");t.classList.add("blocked"),t.dataset.row=o,t.dataset.column=i,e.appendChild(t)}else{const t=document.createElement("div");t.classList.add("gameField"),t.dataset.row=o,t.dataset.column=i,e.appendChild(t)}},e=t=>{const e=document.querySelector(".ships");e.textContent="";for(let o=0;o<t.length;o++)if(1==t[o].land);else{const i=document.createElement("div");i.classList.add("ship"),i.dataset.id=t[o].id,i.classList.add(t[o].name),i.style.gridTemplateColumns=`repeat(${t[o].size}, 1fr)`,i.style.width=`calc(${t[o].id} * 50px)`,i.style.height="50px",i.style.backgroundColor="black",i.draggable=!0;for(let e=0;e<t[o].size;e++){const t=document.createElement("div");t.classList.add("square"),i.appendChild(t)}e.appendChild(i)}},o=t=>{const e=document.querySelector(".computerGameBoard");e.textContent="";for(let o=0;o<10;o++)for(let i=0;i<10;i++)if("X"==t[o][i]){const t=document.createElement("div");t.classList.add("plays"),t.dataset.row=o,t.dataset.column=i,e.appendChild(t)}else{const t=document.createElement("div");t.classList.add("field"),t.dataset.row=o,t.dataset.column=i,e.appendChild(t)}},i=()=>({rowChoice:Math.floor(9*Math.random()),columnChoice:Math.floor(99*Math.random())}),n=[];let l=0;for(let t=0;t<10;t++){const t=[];for(let e=0;e<10;e++)t.push(l),l++;n.push(t)}const s=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}],r=[{name:"Destroyer",size:2,id:2,position:[]},{name:"Submarine",size:3,id:3,position:[]},{name:"Cruiser",size:3,id:3,position:[]},{name:"Battleship",size:4,id:4,position:[]},{name:"Carrier",size:5,id:5,position:[]}];let a=[];for(let t=0;t<100;t++)a.push(t);let d=[];for(let t=0;t<100;t++)d.push(t);const c=t=>"X"!==t;let p=[];for(let t=0;t<10;t++){const t=[];for(let e=0;e<10;e++)t.push(l),l++;p.push(t)}(()=>{i().rowChoice,i().columnChoice,p.length=0;let t=0;for(let e=0;e<10;e++){const e=[];for(let o=0;o<10;o++)e.push(t),t++;p.push(e)}let e=0;o(p);for(let t=0;t<1e3;t++){for(let t=0;t<r.length;t++)r[t].position.every(c)||(r[t].position.length=0);if(r[0].position.length&&r[1].position.length&&r[2].position.length&&r[3].position.length&&r[4].position.length){for(let t=0;t<10;t++)p[t].filter((t=>"X"==t))&&(e+=p[t].filter((t=>"X"==t)).length);return console.log(e),{computerArr:p,shipNameAndSizeComputer:r}}for(let t=0;t<r.length;t++)if(r[t].position.length>1);else{const e=(n=t,Math.floor(94*Math.random())+r[n].size);let o,i;1==e.toString().length?(o=0,i=Number(e.toString().split("")[0])):(o=Number(e.toString().split("")[0]),i=Number(e.toString().split("")[1]));const l=p[o].findIndex((t=>t==e));if(l>0&&l-r[t].size>=0)for(let e=0;e<r[t].size;e++)r[t].position.push(p[o][l-e]),p[o][l-e]="X"}}var n})();const g=[];let h=0;for(let t=0;t<10;t++){const t=[];for(let e=0;e<10;e++)t.push(h),h++;g.push(t)}let u,m=0;(()=>{for(let t=0;t<r.length;t++)for(let e=0;e<r[t].position.length;e++){let o,i;1==r[t].position[e].toString().split("").length?(o=0,i=Number(r[t].position[e].toString().split("")[0])):(o=r[t].position[e].toString().split("")[0],i=r[t].position[e].toString().split("")[1]),m++,g[o][i]="X"}})(),console.log(g,m),o(g),t(n),e(s),document.addEventListener("dragstart",(t=>{u=t.target,t.target.style.opacity=.3}),!1),document.addEventListener("dragend",(t=>{t.target.style.opacity="",t.target.dataset.row=t.target.firstChild.dataset.row,t.target.dataset.column=t.target.firstChild.dataset.column}),!1),document.addEventListener("dragover",(t=>{t.preventDefault()}),!1),document.addEventListener("dragenter",(t=>{"gameField"==t.target.className&&(t.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(t=>{"gameField"==t.target.className&&(t.target.style.background="")}),!1),document.addEventListener("drop",(o=>{if(o.preventDefault(),"gameField"==o.target.className){o.target.style.background="",o.target.appendChild(u);let i=!1,l=o.target.dataset.row+o.target.dataset.column,r=Number(l);for(let t=0;t<l.split("").length;t++)0==l.split("")[0]&&(l=l.split("")[1]);const a=o.target.firstChild.className.split(" ")[1];let d,c;for(let t=0;t<s.length;t++)s[t].name==a&&(d=s[t].size,c=t);const p=r,g=r+d-1,h=[];for(let t=p;t<=g;t++)h.push(t);const m=(t,e,o,i)=>{for(let i=0;i<t.length;i++)if(t[i].includes(e))return!!t[i].includes(o)&&(!0,s[c].land=!0,true)};if(e(s),m(n,p,g,i)){o.target.style.background="",u.parentNode.removeChild(u),o.target.appendChild(u);for(let t=0;t<n.length;t++)for(let e=0;e<n[t].length;e++)if(n[t][e]==p)if(0==n[t][e]){for(let o=0;o<d;o++)s[c].position.push(n[t][e+o]),n[t][e+o]="x";n[t+1][e]="y";for(let o=0;o<d;o++)n[t+1][e+o]="y";n[t][e+d]="y"}else if(n[t][e]==n[0][e]){for(let o=0;o<d;o++)s[c].position.push(n[t][e+o]),n[t][e+o]="x";n[t+1][e]="y";for(let o=0;o<d;o++)n[t+1][e+o]="y";n[t][p-1]="y",n[t][g+1]="y"}else if(n[t][e]==n[9][e]&&0!=e){for(let o=0;o<d;o++)s[c].position.push(n[t][e+o]),n[t][e+o]="x";for(let o=0;o<d;o++)n[t-1][e+o]="y";n[t][d+e]="y",n[t][e-1]="y"}else if(n[t][e]==n[9][e]){for(let o=0;o<d;o++)s[c].position.push(n[t][e+o]),n[t][e+o]="x";for(let o=0;o<d;o++)n[t-1][e+o]="y";n[t][d]="y"}else{for(let o=0;o<d;o++)s[c].position.push(n[t][e+o]),n[t][e+o]="x";n[t+1][e]="y",n[t-1][e]="y",n[t][e-1]="y",n[t][e+d]="y";for(let o=0;o<d;o++)n[t+1][e+o]="y",n[t-1][e+o]="y"}u.parentNode.removeChild(u)}else u.parentNode.removeChild(u),o.target.style.background="",e(s),s[c].land=!1,t(n);e(s)}t(n),(t=>{let e=0;for(let o=0;o<t.length;o++)t[o].position.length&&e++;return 5==e})(s)&&f()}),!1);const f=()=>{const t=document.querySelector(".ships");t.parentNode.removeChild(t),[...document.querySelector(".computerGameBoard").childNodes].forEach((t=>{t.addEventListener("click",(t=>{if(t.target.classList.contains("plays")){let e=[];const o=Number(String(t.target.dataset.row)+String(t.target.dataset.column));for(let t=0;t<r.length;t++)for(let e=0;e<r[t].position.length;e++)r[t].position[e]==o&&r[t].position.splice(e,1);t.target.classList.add("field"),t.target.classList.remove("plays");for(let t=0;t<r.length;t++)0==r[t].position.length&&e.push("true");if(5==e.length)return void console.log("You win")}for(let t=0;t<100;t++)y(),console.log(a.length)}))}))},y=()=>{for(let t=0;t<1e3;t++){const t=Math.floor(99*Math.random());if(a.findIndex((e=>e==t))>-1){let e,o,i=a.findIndex((e=>e==t));1==t.toString().split("").length?(e=0,o=Number(t.toString().split("")[0])):(e=Number(t.toString().split("")[0]),o=Number(t.toString().split("")[1]));for(let t=0;t<s.length;t++)for(let e=0;e<s[t].position.length;e++)if(s[t].position[e]==i)return s[t].position.splice(e,1),void a.splice(i,1)}}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,