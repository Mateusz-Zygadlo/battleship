(()=>{"use strict";const t=t=>{const e=document.querySelector(".gameboard");e.textContent="";for(let o=0;o<10;o++)for(let n=0;n<10;n++)if("x"==t[o][n]){const t=document.createElement("div");t.classList.add("checked"),t.dataset.row=o,t.dataset.column=n,e.appendChild(t)}else if("y"==t[o][n]){const t=document.createElement("div");t.classList.add("blocked"),t.dataset.row=o,t.dataset.column=n,e.appendChild(t)}else{const t=document.createElement("div");t.classList.add("gameField"),t.dataset.row=o,t.dataset.column=n,e.appendChild(t)}},e=t=>{const e=document.querySelector(".ships");e.textContent="";for(let o=0;o<t.length;o++)if(1==t[o].land);else{const n=document.createElement("div");n.classList.add("ship"),n.dataset.id=t[o].id,n.classList.add(t[o].name),n.style.gridTemplateColumns=`repeat(${t[o].size}, 1fr)`,n.style.width=`calc(${t[o].id} * 50px)`,n.style.height="50px",n.style.backgroundColor="black",n.draggable=!0;for(let e=0;e<t[o].size;e++){const t=document.createElement("div");t.classList.add("square"),n.appendChild(t)}e.appendChild(n)}},o=t=>{const e=document.querySelector(".computerGameBoard");e.textContent="";for(let o=0;o<10;o++)for(let n=0;n<10;n++)if("X"==t[o][n]){const t=document.createElement("div");t.classList.add("plays"),t.dataset.row=o,t.dataset.column=n,e.appendChild(t)}else{const t=document.createElement("div");t.classList.add("field"),t.dataset.row=o,t.dataset.column=n,e.appendChild(t)}},n=()=>({rowChoice:Math.floor(9*Math.random()),columnChoice:Math.floor(99*Math.random())}),l=[];let i=0;for(let t=0;t<10;t++){const t=[];for(let e=0;e<10;e++)t.push(i),i++;l.push(t)}const s=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}],r=[{name:"Destroyer",size:2,position:[]},{name:"Submarine",size:3,position:[]},{name:"Cruiser",size:3,position:[]},{name:"Battleship",size:4,position:[]},{name:"Carrier",size:5,position:[]}];let a=[];const d=t=>{for(let e=0;e<100;e++)t.push(e)};d([]),d(a);const c=t=>"X"!==t;let p=[];for(let t=0;t<10;t++){const t=[];for(let e=0;e<10;e++)t.push(i),i++;p.push(t)}(()=>{n().rowChoice,n().columnChoice,p.length=0;let t=0;for(let e=0;e<10;e++){const e=[];for(let o=0;o<10;o++)e.push(t),t++;p.push(e)}let e=0;o(p);for(let t=0;t<1e3;t++){for(let t=0;t<r.length;t++)r[t].position.every(c)||(r[t].position.length=0);if(r[0].position.length&&r[1].position.length&&r[2].position.length&&r[3].position.length&&r[4].position.length){for(let t=0;t<10;t++)p[t].filter((t=>"X"==t))&&(e+=p[t].filter((t=>"X"==t)).length);return console.log(e),{computerArr:p,shipNameAndSizeComputer:r}}for(let t=0;t<r.length;t++)if(r[t].position.length>1);else{const e=(l=t,Math.floor(94*Math.random())+r[l].size);let o,n;1==e.toString().length?(o=0,n=Number(e.toString().split("")[0])):(o=Number(e.toString().split("")[0]),n=Number(e.toString().split("")[1]));const i=p[o].findIndex((t=>t==e));if(i>0&&i-r[t].size>=0)for(let e=0;e<r[t].size;e++)r[t].position.push(p[o][i-e]),p[o][i-e]="X"}}var l})();const g=[];let h=0;for(let t=0;t<10;t++){const t=[];for(let e=0;e<10;e++)t.push(h),h++;g.push(t)}let u,m=0;(()=>{for(let t=0;t<r.length;t++)for(let e=0;e<r[t].position.length;e++){let o,n;1==r[t].position[e].toString().split("").length?(o=0,n=Number(r[t].position[e].toString().split("")[0])):(o=r[t].position[e].toString().split("")[0],n=r[t].position[e].toString().split("")[1]),m++,g[o][n]="X"}})(),console.log(g,m),o(g),t(l),e(s),document.addEventListener("dragstart",(t=>{u=t.target,t.target.style.opacity=.3}),!1),document.addEventListener("dragend",(t=>{t.target.style.opacity="",t.target.dataset.row=t.target.firstChild.dataset.row,t.target.dataset.column=t.target.firstChild.dataset.column}),!1),document.addEventListener("dragover",(t=>{t.preventDefault()}),!1),document.addEventListener("dragenter",(t=>{"gameField"==t.target.className&&(t.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(t=>{"gameField"==t.target.className&&(t.target.style.background="")}),!1),document.addEventListener("drop",(o=>{if(o.preventDefault(),"gameField"==o.target.className){o.target.style.background="",o.target.appendChild(u);let n=!1,i=o.target.dataset.row+o.target.dataset.column,r=Number(i);for(let t=0;t<i.split("").length;t++)0==i.split("")[0]&&(i=i.split("")[1]);const a=o.target.firstChild.className.split(" ")[1];let d,c;for(let t=0;t<s.length;t++)s[t].name==a&&(d=s[t].size,c=t);const p=r,g=r+d-1,h=[];for(let t=p;t<=g;t++)h.push(t);const m=(t,e,o,n)=>{for(let n=0;n<t.length;n++)if(t[n].includes(e))return!!t[n].includes(o)&&(!0,s[c].land=!0,true)};if(e(s),m(l,p,g,n)){o.target.style.background="",u.parentNode.removeChild(u),o.target.appendChild(u);for(let t=0;t<l.length;t++)for(let e=0;e<l[t].length;e++)if(l[t][e]==p)if(0==l[t][e]){for(let o=0;o<d;o++)s[c].position.push(l[t][e+o]),l[t][e+o]="x";l[t+1][e]="y";for(let o=0;o<d;o++)l[t+1][e+o]="y";l[t][e+d]="y"}else if(l[t][e]==l[0][e]){for(let o=0;o<d;o++)s[c].position.push(l[t][e+o]),l[t][e+o]="x";l[t+1][e]="y";for(let o=0;o<d;o++)l[t+1][e+o]="y";l[t][p-1]="y",l[t][g+1]="y"}else if(l[t][e]==l[9][e]&&0!=e){for(let o=0;o<d;o++)s[c].position.push(l[t][e+o]),l[t][e+o]="x";for(let o=0;o<d;o++)l[t-1][e+o]="y";l[t][d+e]="y",l[t][e-1]="y"}else if(l[t][e]==l[9][e]){for(let o=0;o<d;o++)s[c].position.push(l[t][e+o]),l[t][e+o]="x";for(let o=0;o<d;o++)l[t-1][e+o]="y";l[t][d]="y"}else{for(let o=0;o<d;o++)s[c].position.push(l[t][e+o]),l[t][e+o]="x";l[t+1][e]="y",l[t-1][e]="y",l[t][e-1]="y",l[t][e+d]="y";for(let o=0;o<d;o++)l[t+1][e+o]="y",l[t-1][e+o]="y"}u.parentNode.removeChild(u)}else u.parentNode.removeChild(u),o.target.style.background="",e(s),s[c].land=!1,t(l);e(s)}t(l),(t=>{let e=0;for(let o=0;o<t.length;o++)t[o].position.length&&e++;return 5==e})(s)&&f()}),!1);const f=()=>{const t=document.querySelector(".ships");t.parentNode.removeChild(t),[...document.querySelector(".computerGameBoard").childNodes].forEach((t=>{t.addEventListener("click",(t=>{if(t.target.classList.contains("plays")){let e=[];const o=Number(String(t.target.dataset.row)+String(t.target.dataset.column));for(let t=0;t<r.length;t++)for(let e=0;e<r[t].position.length;e++)r[t].position[e]==o&&r[t].position.splice(e,1);t.target.classList.add("field"),t.target.classList.remove("plays");for(let t=0;t<r.length;t++)0==r[t].position.length&&e.push("true");if(5==e.length)return void C("you, [player]")}y(),console.log(a.length),console.log(s)}))}))},y=()=>{for(let t=0;t<1e3;t++){const t=Math.floor(99*Math.random());if(a.findIndex((e=>e==t))>-1){let e,o,n=a.findIndex((e=>e==t));1==t.toString().split("").length?(e=0,o=Number(t.toString().split("")[0])):(e=Number(t.toString().split("")[0]),o=Number(t.toString().split("")[1]));let l=a.splice(n,1);if(l){for(let t=0;t<s.length;t++)for(let e=0;e<s[t].position.length;e++)if(s[t].position[e]==l){s[t].position.splice(e,1),console.log("Computer blow",a.length);let o=[];for(let t=0;t<s.length;t++)0==s[t].position.length&&o.push("true");return 5==o.length?void C("computer"):void 0}let t=[];for(let e=0;e<s.length;e++)for(let o=0;o<s[e].position.length;o++)t.push(s[e].position[o]);return void console.log("You not blow",a.length,t.length)}}}},C=t=>{const e=document.querySelector(".game"),o=document.createElement("div");o.classList.add("fixedWinnerPage");const n=document.createElement("h1");n.textContent=`The winner is [${t}]`,o.appendChild(n),e.appendChild(o)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,