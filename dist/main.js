(()=>{"use strict";const e=e=>{const t=document.querySelector(".gameboard");t.textContent="";for(let o=0;o<10;o++)for(let l=0;l<10;l++)if("x"==e[o][l]){const e=document.createElement("div");e.classList.add("checked"),e.dataset.row=o,e.dataset.column=l,t.appendChild(e)}else if("y"==e[o][l]){const e=document.createElement("div");e.classList.add("blocked"),e.dataset.row=o,e.dataset.column=l,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("gameField"),e.dataset.row=o,e.dataset.column=l,t.appendChild(e)}},t=e=>{const t=document.querySelector(".ships");t.textContent="";for(let o=0;o<e.length;o++)if(1==e[o].land);else{const l=document.createElement("div");l.classList.add("ship"),l.dataset.id=e[o].id,l.classList.add(e[o].name),l.style.gridTemplateColumns=`repeat(${e[o].size}, 1fr)`,l.style.width=`calc(${e[o].id} * 50px)`,l.style.height="50px",l.style.backgroundColor="black",l.draggable=!0;for(let t=0;t<e[o].size;t++){const e=document.createElement("div");e.classList.add("square"),l.appendChild(e)}t.appendChild(l)}},o=e=>{const t=document.querySelector(".computerGameBoard");t.textContent="";for(let o=0;o<10;o++)for(let l=0;l<10;l++)if("X"==e[o][l]){const e=document.createElement("div");e.classList.add("plays"),e.dataset.row=o,e.dataset.column=l,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("field"),e.dataset.row=o,e.dataset.column=l,t.appendChild(e)}},l=()=>({rowChoice:Math.floor(9*Math.random()),columnChoice:Math.floor(99*Math.random())}),s=[];let n=0;for(let e=0;e<10;e++){const e=[];for(let t=0;t<10;t++)e.push(n),n++;s.push(e)}const i=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}],a=[{name:"Destroyer",size:2,id:2,position:[]},{name:"Submarine",size:3,id:3,position:[]},{name:"Cruiser",size:3,id:3,position:[]},{name:"Battleship",size:4,id:4,position:[]},{name:"Carrier",size:5,id:5,position:[]}],r=e=>"X"!==e;let d=[];for(let e=0;e<10;e++){const e=[];for(let t=0;t<10;t++)e.push(n),n++;d.push(e)}(()=>{l().rowChoice,l().columnChoice,d.length=0;let e=0;for(let t=0;t<10;t++){const t=[];for(let o=0;o<10;o++)t.push(e),e++;d.push(t)}let t=0;o(d);for(let e=0;e<1e3;e++){for(let e=0;e<a.length;e++)a[e].position.every(r)||(a[e].position.length=0);if(a[0].position.length&&a[1].position.length&&a[2].position.length&&a[3].position.length&&a[4].position.length){for(let e=0;e<10;e++)d[e].filter((e=>"X"==e))&&(t+=d[e].filter((e=>"X"==e)).length);return console.log(t),{computerArr:d,shipNameAndSizeComputer:a}}for(let e=0;e<a.length;e++)if(a[e].position.length>1);else{const t=(s=e,Math.floor(94*Math.random())+a[s].size);let o,l;1==t.toString().length?(o=0,l=Number(t.toString().split("")[0])):(o=Number(t.toString().split("")[0]),l=Number(t.toString().split("")[1]));const n=d[o].findIndex((e=>e==t));if(n>0&&n-a[e].size>=0)for(let t=0;t<a[e].size;t++)a[e].position.push(d[o][n-t]),d[o][n-t]="X"}}var s})();const c=[];let p=0;for(let e=0;e<10;e++){const e=[];for(let t=0;t<10;t++)e.push(p),p++;c.push(e)}let g,m=0;for(let e=0;e<a.length;e++)for(let t=0;t<a[e].position.length;t++){let o,l;1==a[e].position[t].toString().split("").length?(o=0,l=Number(a[e].position[t].toString().split("")[0])):(o=a[e].position[t].toString().split("")[0],l=a[e].position[t].toString().split("")[1]),m++,c[o][l]="X"}console.log(c,m),o(c),e(s),t(i),document.addEventListener("dragstart",(e=>{g=e.target,e.target.style.opacity=.3}),!1),document.addEventListener("dragend",(e=>{e.target.style.opacity="",e.target.dataset.row=e.target.firstChild.dataset.row,e.target.dataset.column=e.target.firstChild.dataset.column}),!1),document.addEventListener("dragover",(e=>{e.preventDefault()}),!1),document.addEventListener("dragenter",(e=>{"gameField"==e.target.className&&(e.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(e=>{"gameField"==e.target.className&&(e.target.style.background="")}),!1),document.addEventListener("drop",(o=>{if(o.preventDefault(),"gameField"==o.target.className){o.target.style.background="",o.target.appendChild(g);let l=!1,n=o.target.dataset.row+o.target.dataset.column,a=Number(n);for(let e=0;e<n.split("").length;e++)0==n.split("")[0]&&(n=n.split("")[1]);const r=o.target.firstChild.className.split(" ")[1];let d,c;for(let e=0;e<i.length;e++)i[e].name==r&&(d=i[e].size,c=e);const p=a,m=a+d-1,u=[];for(let e=p;e<=m;e++)u.push(e);const h=(e,t,o,l)=>{for(let l=0;l<e.length;l++)if(e[l].includes(t))return!!e[l].includes(o)&&(!0,i[c].land=!0,true)};if(t(i),h(s,p,m,l)){o.target.style.background="",g.parentNode.removeChild(g),o.target.appendChild(g);for(let e=0;e<s.length;e++)for(let t=0;t<s[e].length;t++)if(s[e][t]==p)if(0==s[e][t]){for(let o=0;o<d;o++)i[c].position.push(s[e][t+o]),s[e][t+o]="x";s[e+1][t]="y";for(let o=0;o<d;o++)s[e+1][t+o]="y";s[e][t+d]="y",console.log(e)}else if(s[e][t]==s[0][t]){for(let o=0;o<d;o++)i[c].position.push(s[e][t+o]),s[e][t+o]="x";s[e+1][t]="y";for(let o=0;o<d;o++)s[e+1][t+o]="y";s[e][p-1]="y",s[e][m+1]="y"}else if(s[e][t]==s[9][t]&&0!=t){for(let o=0;o<d;o++)i[c].position.push(s[e][t+o]),s[e][t+o]="x";for(let o=0;o<d;o++)s[e-1][t+o]="y";console.log(!0,!1),s[e][d+t]="y",s[e][t-1]="y"}else if(s[e][t]==s[9][t]){for(let o=0;o<d;o++)i[c].position.push(s[e][t+o]),s[e][t+o]="x";for(let o=0;o<d;o++)s[e-1][t+o]="y";console.log(!0,!1),s[e][d]="y"}else{for(let o=0;o<d;o++)i[c].position.push(s[e][t+o]),s[e][t+o]="x";s[e+1][t]="y",s[e-1][t]="y",s[e][t-1]="y",s[e][t+d]="y";for(let o=0;o<d;o++)s[e+1][t+o]="y",s[e-1][t+o]="y"}g.parentNode.removeChild(g)}else g.parentNode.removeChild(g),o.target.style.background="",t(i),i[c].land=!1,e(s);t(i)}(e=>{let t=0;for(let o=0;o<e.length;o++)e[o].position.length&&t++;return 5==t})(i)&&console.log("start game"),e(s),console.log(s),console.log(i)}),!1)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,