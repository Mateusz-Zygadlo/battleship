(()=>{"use strict";const e=e=>{const t=document.querySelector(".gameboard");t.textContent="";for(let o=0;o<10;o++)for(let n=0;n<10;n++)if("x"==e[o][n]){const e=document.createElement("div");e.classList.add("checked"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}else if("y"==e[o][n]){const e=document.createElement("div");e.classList.add("blocked"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("gameField"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}},t=e=>{const t=document.querySelector(".ships");t.textContent="";for(let o=0;o<e.length;o++)if(1==e[o].land);else{const n=document.createElement("div");n.classList.add("ship"),n.dataset.id=e[o].id,n.classList.add(e[o].name),n.style.gridTemplateColumns=`repeat(${e[o].size}, 1fr)`,n.style.width=`calc(${e[o].id} * 50px)`,n.style.height="50px",n.style.backgroundColor="black",n.draggable=!0;for(let t=0;t<e[o].size;t++){const e=document.createElement("div");e.classList.add("square"),n.appendChild(e)}t.appendChild(n)}},o=[],n=e=>{let t=0;for(let o=0;o<10;o++){const o=[];for(let e=0;e<10;e++)o.push(t),t++;e.push(o)}};n(o);const l=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}],i=[{name:"Destroyer",size:2,position:[]},{name:"Submarine",size:3,position:[]},{name:"Cruiser",size:3,position:[]},{name:"Battleship",size:4,position:[]},{name:"Carrier",size:5,position:[]}];let s=[];const r=e=>{for(let t=0;t<100;t++)e.push(t)};r([]),r(s);const a=e=>"X"!==e,d=e=>"Y"!=e;let c=[];n(c),(()=>{let e=0;c.length=0,n(c);for(let o=0;o<1e3;o++){for(let e=0;e<i.length;e++)i[e].position.every(a)||(i[e].position.length=0);if(i[0].position.length&&i[1].position.length&&i[2].position.length&&i[3].position.length&&i[4].position.length){for(let t=0;t<10;t++)c[t].filter((e=>"X"==e))&&(e+=c[t].filter((e=>"X"==e)).length);return console.log(e),{computerArr:c,shipNameAndSizeComputer:i}}for(let e=0;e<i.length;e++)if(i[e].position.length>1);else{const o=(t=e,Math.floor(94*Math.random())+i[t].size);let l,s;1==o.toString().length?(l=0,s=Number(o.toString().split("")[0])):(l=Number(o.toString().split("")[0]),s=Number(o.toString().split("")[1]));const r=c[l].findIndex((e=>e==o));if(r>0&&r-i[e].size>=0){for(let t=0;t<i[e].size;t++)i[e].position.push(c[l][r-t]),c[l][r-t]="X";if(0==l&&0==r){c[l+1][r+1]="Y";for(let t=0;t<i[e].size;t++)c[l+1][r-t]="Y"}else if(9==l&&r>0){c[l][r-i[e].size]="Y";for(let t=0;t<i[e].size;t++)c[l-1][r-t]="Y"}else if(9==l&&0==r)c[l][r+1]="Y",c[l][r-i[e].size]="Y";else if(0==l&&r>0){c[l][r+1]="Y",c[l][r-i[e].size]="Y";for(let t=0;t<i[e].size;t++)c[l+1][r-t]="Y"}else{c[l][r+1]="Y",c[l][r-i[e].size]="Y";for(let t=0;t<i[e].size;t++)c[l+1][r-t]="Y",c[l-1][r-t]="Y"}for(let e=0;e<i.length;e++)if(!i[e].position.every(d)){for(let e=0;e<i.length;e++)i[e].position.length=0;c.length=0,n(c),console.log(!1);break}console.log(i)}}}var t})();const p=[];n(p);let g,m=0;(()=>{for(let e=0;e<1e3;e++)for(let e=0;e<i.length;e++)for(let t=0;t<i[e].position.length;t++){let o,n;1==i[e].position[t].toString().split("").length?(o=0,n=i[e].position[t].toString().split("")[0]):(o=i[e].position[t].toString().split("")[0],n=i[e].position[t].toString().split("")[1]),m++,p[o][n]="X"}})(),console.log(p,m),e(o),t(l),document.addEventListener("dragstart",(e=>{g=e.target,e.target.style.opacity=.3}),!1),document.addEventListener("dragend",(e=>{e.target.style.opacity="",e.target.dataset.row=e.target.firstChild.dataset.row,e.target.dataset.column=e.target.firstChild.dataset.column}),!1),document.addEventListener("dragover",(e=>{e.preventDefault()}),!1),document.addEventListener("dragenter",(e=>{"gameField"==e.target.className&&(e.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(e=>{"gameField"==e.target.className&&(e.target.style.background="")}),!1),document.addEventListener("drop",(n=>{if(n.preventDefault(),"gameField"==n.target.className){n.target.style.background="",n.target.appendChild(g);let i=n.target.dataset.row+n.target.dataset.column,s=Number(i);for(let e=0;e<i.split("").length;e++)0==i.split("")[0]&&(i=i.split("")[1]);const r=n.target.firstChild.className.split(" ")[1];let a,d;for(let e=0;e<l.length;e++)l[e].name==r&&(a=l[e].size,d=e);const c=s,p=s+a-1,m=[];for(let e=c;e<=p;e++)m.push(e);t(l),((e,t,o,n,l,i)=>{for(let n=0;n<e.length;n++)if(e[n].includes(t))return!!e[n].includes(o)&&(i[l].land=!0,!0)})(o,c,p,0,d,l)?(n.target.style.background="",n.target.appendChild(g),g.parentNode.removeChild(g),((e,t,o,n,l,i)=>{for(let s=0;s<e.length;s++)for(let r=0;r<e[s].length;r++)if(e[s][r]==t)if(0==e[s][r]){for(let t=0;t<o;t++)i[n].position.push(e[s][r+t]),e[s][r+t]="x";e[s+1][r]="y";for(let t=0;t<o;t++)e[s+1][r+t]="y";e[s][r+o]="y"}else if(e[s][r]==e[0][r]){for(let t=0;t<o;t++)i[n].position.push(e[s][r+t]),e[s][r+t]="x";e[s+1][r]="y";for(let t=0;t<o;t++)e[s+1][r+t]="y";e[s][t-1]="y",e[s][l+1]="y"}else if(e[s][r]==e[9][r]&&0!=r){for(let t=0;t<o;t++)i[n].position.push(e[s][r+t]),e[s][r+t]="x";for(let t=0;t<o;t++)e[s-1][r+t]="y";e[s][o+r]="y",e[s][r-1]="y"}else if(e[s][r]==e[9][r]){for(let t=0;t<o;t++)i[n].position.push(e[s][r+t]),e[s][r+t]="x";for(let t=0;t<o;t++)e[s-1][r+t]="y";e[s][o]="y"}else{for(let t=0;t<o;t++)i[n].position.push(e[s][r+t]),e[s][r+t]="x";e[s+1][r]="y",e[s-1][r]="y",e[s][r-1]="y",e[s][r+o]="y";for(let t=0;t<o;t++)e[s+1][r+t]="y",e[s-1][r+t]="y"}})(o,c,a,d,p,l)):(n.target.style.background="",g.parentNode.removeChild(g),l[d].land=!1,t(l),e(o)),t(l)}e(o),(e=>{let t=0;for(let o=0;o<e.length;o++)e[o].position.length&&t++;return 5==t})(l)&&u()}),!1);const u=()=>{const e=document.querySelector(".ships");e.parentNode.removeChild(e);const t=document.createElement("div");t.classList.add("computerGameBoard"),document.querySelector(".game").appendChild(t),(e=>{const t=document.querySelector(".computerGameBoard");t.textContent="";for(let o=0;o<10;o++)for(let n=0;n<10;n++)if("X"==e[o][n]){const e=document.createElement("div");e.classList.add("plays"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}else if("Y"==e[o][n]){const e=document.createElement("div");e.classList.add("blocked"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("field"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}})(p),[...document.querySelector(".computerGameBoard").childNodes].forEach((e=>{e.addEventListener("click",(e=>{if(e.target.classList.contains("plays")){let t=[];const o=Number(String(e.target.dataset.row)+String(e.target.dataset.column));for(let e=0;e<i.length;e++)for(let t=0;t<i[e].position.length;t++)i[e].position[t]==o&&i[e].position.splice(t,1);e.target.classList.add("field"),e.target.classList.remove("plays");for(let e=0;e<i.length;e++)0==i[e].position.length&&t.push("true");if(5==t.length)return void f("you, [player]")}h(),console.log(s.length),console.log(l)}))}))},h=()=>{for(let e=0;e<1e3;e++){const e=Math.floor(99*Math.random());let t,o;if(s.findIndex((t=>t==e))>-1){let n=s.findIndex((t=>t==e));1==e.toString().split("").length?(t=0,o=Number(e.toString().split("")[0])):(t=Number(e.toString().split("")[0]),o=Number(e.toString().split("")[1]));let i=s.splice(n,1);if(i){for(let e=0;e<l.length;e++)for(let t=0;t<l[e].position.length;t++)if(l[e].position[t]==i){let o=[];l[e].position.splice(t,1);for(let e=0;e<l.length;e++)0==l[e].position.length&&o.push("true");return 5==o.length?void f("computer"):void 0}let e=[];for(let t=0;t<l.length;t++)for(let o=0;o<l[t].position.length;o++)e.push(l[t].position[o]);return void console.log("You not blow",s.length,e.length)}}}},f=e=>{const t=document.querySelector(".game"),o=document.createElement("div");o.classList.add("fixedWinnerPage");const n=document.createElement("h1");n.textContent=`The winner is [${e}]`,o.appendChild(n),t.appendChild(o)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,