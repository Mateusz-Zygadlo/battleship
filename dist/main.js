(()=>{"use strict";const e=e=>{const t=document.querySelector(".gameboard");t.textContent="";for(let o=0;o<10;o++)for(let n=0;n<10;n++)if("x"==e[o][n]){const e=document.createElement("div");e.classList.add("checked"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}else if("y"==e[o][n]){const e=document.createElement("div");e.classList.add("blocked"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("gameField"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}},t=e=>{const t=document.querySelector(".ships");t.textContent="";for(let o=0;o<e.length;o++)if(1==e[o].land);else{const n=document.createElement("div");n.classList.add("ship"),n.dataset.id=e[o].id,n.classList.add(e[o].name),n.style.gridTemplateColumns=`repeat(${e[o].size}, 1fr)`,n.style.width=`calc(${e[o].id} * 50px)`,n.style.height="50px",n.style.backgroundColor="black",n.draggable=!0;for(let t=0;t<e[o].size;t++){const e=document.createElement("div");e.classList.add("square"),n.appendChild(e)}t.appendChild(n)}},o=e=>{const t=document.querySelector(".computerGameBoard");t.textContent="";for(let o=0;o<10;o++)for(let n=0;n<10;n++)if("X"==e[o][n]){const e=document.createElement("div");e.classList.add("plays"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}else if("Y"==e[o][n]){const e=document.createElement("div");e.classList.add("blocked"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}else{const e=document.createElement("div");e.classList.add("field"),e.dataset.row=o,e.dataset.column=n,t.appendChild(e)}},n=[],l=e=>{let t=0;for(let o=0;o<10;o++){const o=[];for(let e=0;e<10;e++)o.push(t),t++;e.push(o)}};l(n);const i=[{name:"Destroyer",size:2,id:2,land:!1,position:[]},{name:"Submarine",size:3,id:3,land:!1,position:[]},{name:"Cruiser",size:3,id:3,land:!1,position:[]},{name:"Battleship",size:4,id:4,land:!1,position:[]},{name:"Carrier",size:5,id:5,land:!1,position:[]}],s=[{name:"Destroyer",size:2,position:[]},{name:"Submarine",size:3,position:[]},{name:"Cruiser",size:3,position:[]},{name:"Battleship",size:4,position:[]},{name:"Carrier",size:5,position:[]}];let r=[];const a=e=>{for(let t=0;t<100;t++)e.push(t)};a([]),a(r);const d=e=>"X"!==e;let c=[];l(c),(()=>{let e=0;c.length=0,l(c),o(c);for(let n=0;n<1e3;n++){for(let e=0;e<s.length;e++)s[e].position.every(d)||(s[e].position.length=0);if(s[0].position.length&&s[1].position.length&&s[2].position.length&&s[3].position.length&&s[4].position.length){for(let t=0;t<10;t++)c[t].filter((e=>"X"==e))&&(e+=c[t].filter((e=>"X"==e)).length);return console.log(e),{computerArr:c,shipNameAndSizeComputer:s}}for(let e=0;e<s.length;e++)if(s[e].position.length>1);else{const n=(t=e,Math.floor(94*Math.random())+s[t].size);let l,i;1==n.toString().length?(l=0,i=Number(n.toString().split("")[0])):(l=Number(n.toString().split("")[0]),i=Number(n.toString().split("")[1]));const r=c[l].findIndex((e=>e==n));if(r>0&&r-s[e].size>=0){for(let t=0;t<s[e].size;t++)s[e].position.push(c[l][r-t]),c[l][r-t]="X";0==l&&0==r?c[l+1][r+1]="Y":0==l&&9==r?c[l][r-s[e].size]="Y":l>=0&&0==r?c[l+1][r+1]="Y":9==l&&9==r?c[l][r-s[e].size]="Y":l>=1&&r>=1?(c[l][r+1]="Y",c[l][r-s[e].size]="Y"):(l>=0&&9==r||(c[l][r+1]="Y"),c[l][r-s[e].size]="Y"),o(c),console.log(c)}}}var t})();const p=[];l(p);let g,u=0;(()=>{for(let e=0;e<s.length;e++)for(let t=0;t<s[e].position.length;t++){let o,n;1==s[e].position[t].toString().split("").length?(o=0,n=Number(s[e].position[t].toString().split("")[0])):(o=s[e].position[t].toString().split("")[0],n=s[e].position[t].toString().split("")[1]),u++,p[o][n]="X";for(let e=0;e<c.length;e++)for(let t=0;t<c[e].length;t++)"Y"==c[e][t]&&(p[e][t]="Y")}})(),console.log(p,u),o(p),e(n),t(i),document.addEventListener("dragstart",(e=>{g=e.target,e.target.style.opacity=.3}),!1),document.addEventListener("dragend",(e=>{e.target.style.opacity="",e.target.dataset.row=e.target.firstChild.dataset.row,e.target.dataset.column=e.target.firstChild.dataset.column}),!1),document.addEventListener("dragover",(e=>{e.preventDefault()}),!1),document.addEventListener("dragenter",(e=>{"gameField"==e.target.className&&(e.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(e=>{"gameField"==e.target.className&&(e.target.style.background="")}),!1),document.addEventListener("drop",(o=>{if(o.preventDefault(),"gameField"==o.target.className){o.target.style.background="",o.target.appendChild(g);let l=!1,s=o.target.dataset.row+o.target.dataset.column,r=Number(s);for(let e=0;e<s.split("").length;e++)0==s.split("")[0]&&(s=s.split("")[1]);const a=o.target.firstChild.className.split(" ")[1];let d,c;for(let e=0;e<i.length;e++)i[e].name==a&&(d=i[e].size,c=e);const p=r,u=r+d-1,m=[];for(let e=p;e<=u;e++)m.push(e);t(i),((e,t,o,n,l)=>{for(let s=0;s<e.length;s++)if(e[s].includes(t))return!!e[s].includes(o)&&(n=!0,i[l].land=!0,n)})(n,p,u,l,c)?(o.target.style.background="",o.target.appendChild(g),g.parentNode.removeChild(g),((e,t,o,n,l)=>{for(let s=0;s<e.length;s++)for(let r=0;r<e[s].length;r++)if(e[s][r]==t)if(0==e[s][r]){for(let t=0;t<o;t++)i[n].position.push(e[s][r+t]),e[s][r+t]="x";e[s+1][r]="y";for(let t=0;t<o;t++)e[s+1][r+t]="y";e[s][r+o]="y"}else if(e[s][r]==e[0][r]){for(let t=0;t<o;t++)i[n].position.push(e[s][r+t]),e[s][r+t]="x";e[s+1][r]="y";for(let t=0;t<o;t++)e[s+1][r+t]="y";e[s][t-1]="y",e[s][l+1]="y"}else if(e[s][r]==e[9][r]&&0!=r){for(let t=0;t<o;t++)i[n].position.push(e[s][r+t]),e[s][r+t]="x";for(let t=0;t<o;t++)e[s-1][r+t]="y";e[s][o+r]="y",e[s][r-1]="y"}else if(e[s][r]==e[9][r]){for(let t=0;t<o;t++)i[n].position.push(e[s][r+t]),e[s][r+t]="x";for(let t=0;t<o;t++)e[s-1][r+t]="y";e[s][o]="y"}else{for(let t=0;t<o;t++)i[n].position.push(e[s][r+t]),e[s][r+t]="x";e[s+1][r]="y",e[s-1][r]="y",e[s][r-1]="y",e[s][r+o]="y";for(let t=0;t<o;t++)e[s+1][r+t]="y",e[s-1][r+t]="y"}})(n,p,d,c,u)):(o.target.style.background="",g.parentNode.removeChild(g),i[c].land=!1,t(i),e(n)),t(i)}e(n),(e=>{let t=0;for(let o=0;o<e.length;o++)e[o].position.length&&t++;return 5==t})(i)&&m()}),!1);const m=()=>{const e=document.querySelector(".ships");e.parentNode.removeChild(e),[...document.querySelector(".computerGameBoard").childNodes].forEach((e=>{e.addEventListener("click",(e=>{if(e.target.classList.contains("plays")){let t=[];const o=Number(String(e.target.dataset.row)+String(e.target.dataset.column));for(let e=0;e<s.length;e++)for(let t=0;t<s[e].position.length;t++)s[e].position[t]==o&&s[e].position.splice(t,1);e.target.classList.add("field"),e.target.classList.remove("plays");for(let e=0;e<s.length;e++)0==s[e].position.length&&t.push("true");if(5==t.length)return void f("you, [player]")}h(),console.log(r.length),console.log(i)}))}))},h=()=>{for(let e=0;e<1e3;e++){const e=Math.floor(99*Math.random());if(r.findIndex((t=>t==e))>-1){let t=r.findIndex((t=>t==e));1==e.toString().split("").length?(row=0,column=Number(e.toString().split("")[0])):(row=Number(e.toString().split("")[0]),column=Number(e.toString().split("")[1]));let o=r.splice(t,1);if(o){for(let e=0;e<i.length;e++)for(let t=0;t<i[e].position.length;t++)if(i[e].position[t]==o){let o=[];i[e].position.splice(t,1);for(let e=0;e<i.length;e++)0==i[e].position.length&&o.push("true");return 5==o.length?void f("computer"):void 0}let e=[];for(let t=0;t<i.length;t++)for(let o=0;o<i[t].position.length;o++)e.push(i[t].position[o]);return void console.log("You not blow",r.length,e.length)}}}},f=e=>{const t=document.querySelector(".game"),o=document.createElement("div");o.classList.add("fixedWinnerPage");const n=document.createElement("h1");n.textContent=`The winner is [${e}]`,o.appendChild(n),t.appendChild(o)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,