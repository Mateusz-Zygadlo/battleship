(()=>{"use strict";let e;(()=>{const e=document.querySelector(".gameboard");for(let t=0;t<10;t++)for(let a=0;a<10;a++)if(0==t&&0==a){const d=document.createElement("div");d.classList.add("gameField"),d.dataset.row=t,d.dataset.column=a;const r=document.createElement("div");r.id="draggable",r.draggable=!0,r.dataset.row=t,r.dataset.column=a,d.appendChild(r),e.appendChild(d)}else{const d=document.createElement("div");d.classList.add("gameField"),d.dataset.row=t,d.dataset.column=a,e.appendChild(d)}})(),(()=>{const e=[{name:"Destroyer",size:2,id:2},{name:"Submarine",size:3,id:3},{name:"Cruiser",size:3,id:3},{name:"Battleship",size:4,id:4},{name:"Carrier",size:5,id:5}],t=document.querySelector(".ships");for(let a=0;a<e.length;a++){const d=document.createElement("div");d.classList.add("ship"),d.dataset.id=e[a].id,d.style.gridTemplateColumns=`repeat(${e[a].size}, 1fr)`,d.style.width=`calc(${e[a].id} * 50px)`,d.style.height="50px",d.style.backgroundColor="black",d.draggable=!0;for(let t=0;t<e[a].size;t++){const e=document.createElement("div");e.classList.add("square"),d.appendChild(e)}t.appendChild(d)}})(),document.addEventListener("dragstart",(t=>{e=t.target,t.target.style.opacity=.3}),!1),document.addEventListener("dragend",(e=>{e.target.style.opacity="",e.target.dataset.row=e.target.firstChild.dataset.row,e.target.dataset.column=e.target.firstChild.dataset.column}),!1),document.addEventListener("dragover",(e=>{e.preventDefault()}),!1),document.addEventListener("dragenter",(e=>{"gameField"==e.target.className&&(e.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(e=>{"gameField"==e.target.className&&(e.target.style.background="")}),!1),document.addEventListener("drop",(t=>{t.preventDefault(),"gameField"==t.target.className&&(t.target.style.background="",e.parentNode.removeChild(e),t.target.appendChild(e),console.log(t.target.nextSibling),console.log(t.target.childNodes[0].firstChild),console.log(t.target.childNodes[0].lastChild))}),!1)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,