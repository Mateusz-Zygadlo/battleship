(()=>{"use strict";const e=e=>{const t=document.querySelector(".ships");t.textContent="";for(let a=0;a<e.length;a++)if(1==e[a].land)console.log("is land");else{const d=document.createElement("div");d.classList.add("ship"),d.dataset.id=e[a].id,d.classList.add(e[a].name),d.style.gridTemplateColumns=`repeat(${e[a].size}, 1fr)`,d.style.width=`calc(${e[a].id} * 50px)`,d.style.height="50px",d.style.backgroundColor="black",d.draggable=!0;for(let t=0;t<e[a].size;t++){const e=document.createElement("div");e.classList.add("square"),d.appendChild(e)}t.appendChild(d)}},t=[{name:"Destroyer",size:2,id:2,land:!1},{name:"Submarine",size:3,id:3,land:!1},{name:"Cruiser",size:3,id:3,land:!1},{name:"Battleship",size:4,id:4,land:!1},{name:"Carrier",size:5,id:5,land:!1}];let a;(()=>{const e=document.querySelector(".gameboard");for(let t=0;t<10;t++)for(let a=0;a<10;a++)if(0==t&&0==a){const d=document.createElement("div");d.classList.add("gameField"),d.dataset.row=t,d.dataset.column=a;const l=document.createElement("div");l.id="draggable",l.draggable=!0,l.dataset.row=t,l.dataset.column=a,d.appendChild(l),e.appendChild(d)}else{const d=document.createElement("div");d.classList.add("gameField"),d.dataset.row=t,d.dataset.column=a,e.appendChild(d)}})(),e(t);const d=[];let l=0;for(let e=0;e<10;e++){const e=[];for(let t=0;t<10;t++)e.push(l),l++;d.push(e)}document.addEventListener("dragstart",(e=>{a=e.target,e.target.style.opacity=.3}),!1),document.addEventListener("dragend",(e=>{e.target.style.opacity="",e.target.dataset.row=e.target.firstChild.dataset.row,e.target.dataset.column=e.target.firstChild.dataset.column}),!1),document.addEventListener("dragover",(e=>{e.preventDefault()}),!1),document.addEventListener("dragenter",(e=>{"gameField"==e.target.className&&(e.target.style.background="yellow")}),!1),document.addEventListener("dragleave",(e=>{"gameField"==e.target.className&&(e.target.style.background="")}),!1),document.addEventListener("drop",(l=>{if(l.preventDefault(),"gameField"==l.target.className){l.target.style.background="",l.target.appendChild(a);let s=!1,r=l.target.dataset.row+l.target.dataset.column,n=Number(r);r.split("")[0],r.split("")[1];for(let e=0;e<r.split("").length;e++)0==r.split("")[0]&&(r=r.split("")[1]);const i=l.target.firstChild.className.split(" ")[1];let o,c;for(let e=0;e<t.length;e++)t[e].name==i&&(o=t[e].size,c=e);const g=n,m=n+o-1,u=[];for(let e=g;e<=m;e++)u.push(e);const p=(e,a,d,l)=>{for(let l=0;l<e.length;l++)if(e[l].includes(a))return!!e[l].includes(d)&&(!0,t[c].land=!0,true)};p(d,g,m,s)?(l.target.style.background="",a.parentNode.removeChild(a),l.target.appendChild(a)):(a.parentNode.removeChild(a),l.target.style.background="",e(t),t[c].land=!1),e(t)}}),!1)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,